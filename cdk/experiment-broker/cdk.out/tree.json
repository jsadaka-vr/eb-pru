{
  "version": "tree-0.1",
  "tree": {
    "id": "App",
    "path": "",
    "children": {
      "ExperimentBrokerStack": {
        "id": "ExperimentBrokerStack",
        "path": "ExperimentBrokerStack",
        "children": {
          "eb-test-service-role": {
            "id": "eb-test-service-role",
            "path": "ExperimentBrokerStack/eb-test-service-role",
            "children": {
              "Importeb-test-service-role": {
                "id": "Importeb-test-service-role",
                "path": "ExperimentBrokerStack/eb-test-service-role/Importeb-test-service-role",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.Resource",
                  "version": "2.122.0"
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "ExperimentBrokerStack/eb-test-service-role/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                  "aws:cdk:cloudformation:props": {
                    "assumeRolePolicyDocument": {
                      "Statement": [
                        {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": {
                            "Service": "ecs-tasks.amazonaws.com"
                          }
                        }
                      ],
                      "Version": "2012-10-17"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                  "version": "2.122.0"
                }
              },
              "DefaultPolicy": {
                "id": "DefaultPolicy",
                "path": "ExperimentBrokerStack/eb-test-service-role/DefaultPolicy",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "ExperimentBrokerStack/eb-test-service-role/DefaultPolicy/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                      "aws:cdk:cloudformation:props": {
                        "policyDocument": {
                          "Statement": [
                            {
                              "Action": [
                                "s3:GetObject",
                                "s3:ListObjects",
                                "s3:PutObject"
                              ],
                              "Effect": "Allow",
                              "Resource": [
                                "arn:aws:s3:::ebap-begin",
                                "arn:aws:s3:::ebap-begin/*",
                                "arn:aws:s3:::ebap-test",
                                "arn:aws:s3:::ebap-test/*",
                                {
                                  "Fn::GetAtt": [
                                    "ebtestsourcebucketB1DEEE4A",
                                    "Arn"
                                  ]
                                },
                                {
                                  "Fn::Join": [
                                    "",
                                    [
                                      {
                                        "Fn::GetAtt": [
                                          "ebtestsourcebucketB1DEEE4A",
                                          "Arn"
                                        ]
                                      },
                                      "/*"
                                    ]
                                  ]
                                }
                              ]
                            },
                            {
                              "Action": [
                                "kms:Decrypt",
                                "kms:Encrypt",
                                "kms:GenerateDataKey"
                              ],
                              "Effect": "Allow",
                              "Resource": {
                                "Fn::GetAtt": [
                                  "ebtestkeyFA6456B8",
                                  "Arn"
                                ]
                              }
                            },
                            {
                              "Action": [
                                "ecr:*",
                                "eks:*"
                              ],
                              "Effect": "Allow",
                              "Resource": "*"
                            },
                            {
                              "Action": [
                                "ec2:DescribeInstances",
                                "ec2:RunInstances",
                                "ec2:StartInstances",
                                "ec2:StopInstances",
                                "ec2:TerminateInstances"
                              ],
                              "Condition": {
                                "StringEquals": {
                                  "ec2:ResourceTag/Type": "Resiliency"
                                }
                              },
                              "Effect": "Allow",
                              "Resource": "*"
                            },
                            {
                              "Action": [
                                "states:DescribeActivity",
                                "states:DescribeExecution",
                                "states:DescribeStateMachine",
                                "states:GetExecutionHistory",
                                "states:ListActivities",
                                "states:ListExecutions",
                                "states:ListStateMachines",
                                "states:StartExecution"
                              ],
                              "Condition": {
                                "StringEquals": {
                                  "aws:ResourceTag/Type": "RegressionTesting"
                                }
                              },
                              "Effect": "Allow",
                              "Resource": "*"
                            },
                            {
                              "Action": [
                                "ssm:GetParameter*",
                                "ssm:GetParameters*",
                                "ssm:GetParametersByPath*"
                              ],
                              "Effect": "Allow",
                              "Resource": {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:aws:ssm:",
                                    {
                                      "Ref": "AWS::Region"
                                    },
                                    ":",
                                    {
                                      "Ref": "AWS::AccountId"
                                    },
                                    ":parameter/RegressionTesting*"
                                  ]
                                ]
                              }
                            },
                            {
                              "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                              ],
                              "Effect": "Allow",
                              "Resource": {
                                "Fn::GetAtt": [
                                  "ebtestpayloadprocessorloggroup86D1ED75",
                                  "Arn"
                                ]
                              }
                            },
                            {
                              "Action": "states:SendTaskSuccess",
                              "Effect": "Allow",
                              "Resource": {
                                "Ref": "ebtestStateMachine249346BD"
                              }
                            },
                            {
                              "Action": [
                                "ssm:ListCommandInvocations",
                                "ssm:SendCommand"
                              ],
                              "Effect": "Allow",
                              "Resource": "arn:aws:ssm:*:*:document/eb-test-*"
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "policyName": "ebtestserviceroleDefaultPolicy26B52B76",
                        "roles": [
                          {
                            "Ref": "ebtestserviceroleC9BF3597"
                          }
                        ]
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.CfnPolicy",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.Policy",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_iam.Role",
              "version": "2.122.0"
            }
          },
          "eb-test-lambda-role": {
            "id": "eb-test-lambda-role",
            "path": "ExperimentBrokerStack/eb-test-lambda-role",
            "children": {
              "Importeb-test-lambda-role": {
                "id": "Importeb-test-lambda-role",
                "path": "ExperimentBrokerStack/eb-test-lambda-role/Importeb-test-lambda-role",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.Resource",
                  "version": "2.122.0"
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "ExperimentBrokerStack/eb-test-lambda-role/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                  "aws:cdk:cloudformation:props": {
                    "assumeRolePolicyDocument": {
                      "Statement": [
                        {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": {
                            "Service": "lambda.amazonaws.com"
                          }
                        }
                      ],
                      "Version": "2012-10-17"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                  "version": "2.122.0"
                }
              },
              "DefaultPolicy": {
                "id": "DefaultPolicy",
                "path": "ExperimentBrokerStack/eb-test-lambda-role/DefaultPolicy",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "ExperimentBrokerStack/eb-test-lambda-role/DefaultPolicy/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                      "aws:cdk:cloudformation:props": {
                        "policyDocument": {
                          "Statement": [
                            {
                              "Action": [
                                "states:DescribeStateMachine",
                                "states:SendTaskSuccess",
                                "states:StartExecution"
                              ],
                              "Effect": "Allow",
                              "Resource": {
                                "Ref": "ebtestStateMachine249346BD"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "policyName": "ebtestlambdaroleDefaultPolicy2F38B516",
                        "roles": [
                          {
                            "Ref": "ebtestlambdaroleDE103BD1"
                          }
                        ]
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.CfnPolicy",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.Policy",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_iam.Role",
              "version": "2.122.0"
            }
          },
          "eb-test-key": {
            "id": "eb-test-key",
            "path": "ExperimentBrokerStack/eb-test-key",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ExperimentBrokerStack/eb-test-key/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::KMS::Key",
                  "aws:cdk:cloudformation:props": {
                    "keyPolicy": {
                      "Statement": [
                        {
                          "Action": "kms:*",
                          "Effect": "Allow",
                          "Principal": {
                            "AWS": {
                              "Fn::Join": [
                                "",
                                [
                                  "arn:",
                                  {
                                    "Ref": "AWS::Partition"
                                  },
                                  ":iam::",
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  ":root"
                                ]
                              ]
                            }
                          },
                          "Resource": "*"
                        }
                      ],
                      "Version": "2012-10-17"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_kms.CfnKey",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_kms.Key",
              "version": "2.122.0"
            }
          },
          "eb-test-source-bucket": {
            "id": "eb-test-source-bucket",
            "path": "ExperimentBrokerStack/eb-test-source-bucket",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ExperimentBrokerStack/eb-test-source-bucket/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::S3::Bucket",
                  "aws:cdk:cloudformation:props": {
                    "bucketEncryption": {
                      "serverSideEncryptionConfiguration": [
                        {
                          "serverSideEncryptionByDefault": {
                            "sseAlgorithm": "aws:kms",
                            "kmsMasterKeyId": {
                              "Fn::GetAtt": [
                                "ebtestkeyFA6456B8",
                                "Arn"
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "bucketName": "eb-test-source",
                    "publicAccessBlockConfiguration": {
                      "blockPublicAcls": true,
                      "blockPublicPolicy": true,
                      "ignorePublicAcls": true,
                      "restrictPublicBuckets": true
                    },
                    "tags": [
                      {
                        "key": "aws-cdk:auto-delete-objects",
                        "value": "true"
                      },
                      {
                        "key": "aws-cdk:cr-owned:experiments/:f44bcec5",
                        "value": "true"
                      }
                    ]
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_s3.CfnBucket",
                  "version": "2.122.0"
                }
              },
              "Policy": {
                "id": "Policy",
                "path": "ExperimentBrokerStack/eb-test-source-bucket/Policy",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "ExperimentBrokerStack/eb-test-source-bucket/Policy/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::S3::BucketPolicy",
                      "aws:cdk:cloudformation:props": {
                        "bucket": {
                          "Ref": "ebtestsourcebucketB1DEEE4A"
                        },
                        "policyDocument": {
                          "Statement": [
                            {
                              "Action": "s3:*",
                              "Condition": {
                                "Bool": {
                                  "aws:SecureTransport": "false"
                                }
                              },
                              "Effect": "Deny",
                              "Principal": {
                                "AWS": "*"
                              },
                              "Resource": [
                                {
                                  "Fn::GetAtt": [
                                    "ebtestsourcebucketB1DEEE4A",
                                    "Arn"
                                  ]
                                },
                                {
                                  "Fn::Join": [
                                    "",
                                    [
                                      {
                                        "Fn::GetAtt": [
                                          "ebtestsourcebucketB1DEEE4A",
                                          "Arn"
                                        ]
                                      },
                                      "/*"
                                    ]
                                  ]
                                }
                              ]
                            },
                            {
                              "Action": [
                                "s3:DeleteObject*",
                                "s3:GetBucket*",
                                "s3:List*",
                                "s3:PutBucketPolicy"
                              ],
                              "Effect": "Allow",
                              "Principal": {
                                "AWS": {
                                  "Fn::GetAtt": [
                                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                                    "Arn"
                                  ]
                                }
                              },
                              "Resource": [
                                {
                                  "Fn::GetAtt": [
                                    "ebtestsourcebucketB1DEEE4A",
                                    "Arn"
                                  ]
                                },
                                {
                                  "Fn::Join": [
                                    "",
                                    [
                                      {
                                        "Fn::GetAtt": [
                                          "ebtestsourcebucketB1DEEE4A",
                                          "Arn"
                                        ]
                                      },
                                      "/*"
                                    ]
                                  ]
                                }
                              ]
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_s3.CfnBucketPolicy",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_s3.BucketPolicy",
                  "version": "2.122.0"
                }
              },
              "AutoDeleteObjectsCustomResource": {
                "id": "AutoDeleteObjectsCustomResource",
                "path": "ExperimentBrokerStack/eb-test-source-bucket/AutoDeleteObjectsCustomResource",
                "children": {
                  "Default": {
                    "id": "Default",
                    "path": "ExperimentBrokerStack/eb-test-source-bucket/AutoDeleteObjectsCustomResource/Default",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.CfnResource",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CustomResource",
                  "version": "2.122.0"
                }
              },
              "Notifications": {
                "id": "Notifications",
                "path": "ExperimentBrokerStack/eb-test-source-bucket/Notifications",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "ExperimentBrokerStack/eb-test-source-bucket/Notifications/Resource",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.CfnResource",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "constructs.Construct",
                  "version": "10.3.0"
                }
              },
              "AllowBucketNotificationsToExperimentBrokerStackebtestjirawriter9094D85E": {
                "id": "AllowBucketNotificationsToExperimentBrokerStackebtestjirawriter9094D85E",
                "path": "ExperimentBrokerStack/eb-test-source-bucket/AllowBucketNotificationsToExperimentBrokerStackebtestjirawriter9094D85E",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Permission",
                  "aws:cdk:cloudformation:props": {
                    "action": "lambda:InvokeFunction",
                    "functionName": {
                      "Fn::GetAtt": [
                        "ebtestjirawriterB6B35CF2",
                        "Arn"
                      ]
                    },
                    "principal": "s3.amazonaws.com",
                    "sourceAccount": {
                      "Ref": "AWS::AccountId"
                    },
                    "sourceArn": {
                      "Fn::GetAtt": [
                        "ebtestsourcebucketB1DEEE4A",
                        "Arn"
                      ]
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_lambda.CfnPermission",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_s3.Bucket",
              "version": "2.122.0"
            }
          },
          "Custom::S3AutoDeleteObjectsCustomResourceProvider": {
            "id": "Custom::S3AutoDeleteObjectsCustomResourceProvider",
            "path": "ExperimentBrokerStack/Custom::S3AutoDeleteObjectsCustomResourceProvider",
            "children": {
              "Staging": {
                "id": "Staging",
                "path": "ExperimentBrokerStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Staging",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.AssetStaging",
                  "version": "2.122.0"
                }
              },
              "Role": {
                "id": "Role",
                "path": "ExperimentBrokerStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnResource",
                  "version": "2.122.0"
                }
              },
              "Handler": {
                "id": "Handler",
                "path": "ExperimentBrokerStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnResource",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.CustomResourceProviderBase",
              "version": "2.122.0"
            }
          },
          "ExperimentTestFileDeployment": {
            "id": "ExperimentTestFileDeployment",
            "path": "ExperimentBrokerStack/ExperimentTestFileDeployment",
            "children": {
              "AwsCliLayer": {
                "id": "AwsCliLayer",
                "path": "ExperimentBrokerStack/ExperimentTestFileDeployment/AwsCliLayer",
                "children": {
                  "Code": {
                    "id": "Code",
                    "path": "ExperimentBrokerStack/ExperimentTestFileDeployment/AwsCliLayer/Code",
                    "children": {
                      "Stage": {
                        "id": "Stage",
                        "path": "ExperimentBrokerStack/ExperimentTestFileDeployment/AwsCliLayer/Code/Stage",
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.AssetStaging",
                          "version": "2.122.0"
                        }
                      },
                      "AssetBucket": {
                        "id": "AssetBucket",
                        "path": "ExperimentBrokerStack/ExperimentTestFileDeployment/AwsCliLayer/Code/AssetBucket",
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_s3.BucketBase",
                          "version": "2.122.0"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_s3_assets.Asset",
                      "version": "2.122.0"
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "ExperimentBrokerStack/ExperimentTestFileDeployment/AwsCliLayer/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::Lambda::LayerVersion",
                      "aws:cdk:cloudformation:props": {
                        "content": {
                          "s3Bucket": {
                            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
                          },
                          "s3Key": "3322b7049fb0ed2b7cbb644a2ada8d1116ff80c32dca89e6ada846b5de26f961.zip"
                        },
                        "description": "/opt/awscli/aws"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_lambda.CfnLayerVersion",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.lambda_layer_awscli.AwsCliLayer",
                  "version": "2.122.0"
                }
              },
              "CustomResourceHandler": {
                "id": "CustomResourceHandler",
                "path": "ExperimentBrokerStack/ExperimentTestFileDeployment/CustomResourceHandler",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_lambda.SingletonFunction",
                  "version": "2.122.0"
                }
              },
              "Asset1": {
                "id": "Asset1",
                "path": "ExperimentBrokerStack/ExperimentTestFileDeployment/Asset1",
                "children": {
                  "Stage": {
                    "id": "Stage",
                    "path": "ExperimentBrokerStack/ExperimentTestFileDeployment/Asset1/Stage",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.AssetStaging",
                      "version": "2.122.0"
                    }
                  },
                  "AssetBucket": {
                    "id": "AssetBucket",
                    "path": "ExperimentBrokerStack/ExperimentTestFileDeployment/Asset1/AssetBucket",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_s3.BucketBase",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_s3_assets.Asset",
                  "version": "2.122.0"
                }
              },
              "CustomResource": {
                "id": "CustomResource",
                "path": "ExperimentBrokerStack/ExperimentTestFileDeployment/CustomResource",
                "children": {
                  "Default": {
                    "id": "Default",
                    "path": "ExperimentBrokerStack/ExperimentTestFileDeployment/CustomResource/Default",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.CfnResource",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CustomResource",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_s3_deployment.BucketDeployment",
              "version": "2.122.0"
            }
          },
          "Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C": {
            "id": "Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C",
            "path": "ExperimentBrokerStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C",
            "children": {
              "ServiceRole": {
                "id": "ServiceRole",
                "path": "ExperimentBrokerStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole",
                "children": {
                  "ImportServiceRole": {
                    "id": "ImportServiceRole",
                    "path": "ExperimentBrokerStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/ImportServiceRole",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.Resource",
                      "version": "2.122.0"
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "ExperimentBrokerStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "lambda.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "managedPolicyArns": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                              ]
                            ]
                          }
                        ]
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                      "version": "2.122.0"
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "ExperimentBrokerStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "ExperimentBrokerStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": [
                                    "s3:GetBucket*",
                                    "s3:GetObject*",
                                    "s3:List*"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": [
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          "arn:",
                                          {
                                            "Ref": "AWS::Partition"
                                          },
                                          ":s3:::",
                                          {
                                            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
                                          },
                                          "/*"
                                        ]
                                      ]
                                    },
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          "arn:",
                                          {
                                            "Ref": "AWS::Partition"
                                          },
                                          ":s3:::",
                                          {
                                            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
                                          }
                                        ]
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "Action": [
                                    "s3:Abort*",
                                    "s3:DeleteObject*",
                                    "s3:GetBucket*",
                                    "s3:GetObject*",
                                    "s3:List*",
                                    "s3:PutObject",
                                    "s3:PutObjectLegalHold",
                                    "s3:PutObjectRetention",
                                    "s3:PutObjectTagging",
                                    "s3:PutObjectVersionTagging"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": [
                                    {
                                      "Fn::GetAtt": [
                                        "ebtestsourcebucketB1DEEE4A",
                                        "Arn"
                                      ]
                                    },
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          {
                                            "Fn::GetAtt": [
                                              "ebtestsourcebucketB1DEEE4A",
                                              "Arn"
                                            ]
                                          },
                                          "/*"
                                        ]
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "Action": [
                                    "kms:Decrypt",
                                    "kms:DescribeKey",
                                    "kms:Encrypt",
                                    "kms:GenerateDataKey*",
                                    "kms:ReEncrypt*"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": {
                                    "Fn::GetAtt": [
                                      "ebtestkeyFA6456B8",
                                      "Arn"
                                    ]
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
                            "roles": [
                              {
                                "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
                              }
                            ]
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_iam.CfnPolicy",
                          "version": "2.122.0"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.Policy",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.Role",
                  "version": "2.122.0"
                }
              },
              "Code": {
                "id": "Code",
                "path": "ExperimentBrokerStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Code",
                "children": {
                  "Stage": {
                    "id": "Stage",
                    "path": "ExperimentBrokerStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Code/Stage",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.AssetStaging",
                      "version": "2.122.0"
                    }
                  },
                  "AssetBucket": {
                    "id": "AssetBucket",
                    "path": "ExperimentBrokerStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Code/AssetBucket",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_s3.BucketBase",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_s3_assets.Asset",
                  "version": "2.122.0"
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "ExperimentBrokerStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                  "aws:cdk:cloudformation:props": {
                    "code": {
                      "s3Bucket": {
                        "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
                      },
                      "s3Key": "e976a796f036a5efbf44b99e44cfb5a961df08d8dbf7cd37e60bf216fb982a00.zip"
                    },
                    "environment": {
                      "variables": {
                        "AWS_CA_BUNDLE": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"
                      }
                    },
                    "handler": "index.handler",
                    "layers": [
                      {
                        "Ref": "ExperimentTestFileDeploymentAwsCliLayerA54B082D"
                      }
                    ],
                    "role": {
                      "Fn::GetAtt": [
                        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
                        "Arn"
                      ]
                    },
                    "runtime": "python3.9",
                    "timeout": 900
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_lambda.CfnFunction",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_lambda.Function",
              "version": "2.122.0"
            }
          },
          "eb-test-Vpc": {
            "id": "eb-test-Vpc",
            "path": "ExperimentBrokerStack/eb-test-Vpc",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ExperimentBrokerStack/eb-test-Vpc/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::VPC",
                  "aws:cdk:cloudformation:props": {
                    "cidrBlock": "42.0.0.0/16",
                    "enableDnsHostnames": true,
                    "enableDnsSupport": true,
                    "instanceTenancy": "default",
                    "tags": [
                      {
                        "key": "Name",
                        "value": "eb-test-vpc"
                      }
                    ]
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ec2.CfnVPC",
                  "version": "2.122.0"
                }
              },
              "PublicSubnet1": {
                "id": "PublicSubnet1",
                "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet1",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet1/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "availabilityZone": {
                          "Fn::Select": [
                            0,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "cidrBlock": "42.0.0.0/18",
                        "mapPublicIpOnLaunch": true,
                        "tags": [
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "Public"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Public"
                          },
                          {
                            "key": "Name",
                            "value": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet1"
                          }
                        ],
                        "vpcId": {
                          "Ref": "ebtestVpcC4244F9D"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnSubnet",
                      "version": "2.122.0"
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet1/Acl",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.Resource",
                      "version": "2.122.0"
                    }
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet1/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet1"
                          }
                        ],
                        "vpcId": {
                          "Ref": "ebtestVpcC4244F9D"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnRouteTable",
                      "version": "2.122.0"
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet1/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "ebtestVpcPublicSubnet1RouteTableA4A6732D"
                        },
                        "subnetId": {
                          "Ref": "ebtestVpcPublicSubnet1SubnetF5E82D6A"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnSubnetRouteTableAssociation",
                      "version": "2.122.0"
                    }
                  },
                  "DefaultRoute": {
                    "id": "DefaultRoute",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet1/DefaultRoute",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Route",
                      "aws:cdk:cloudformation:props": {
                        "destinationCidrBlock": "0.0.0.0/0",
                        "gatewayId": {
                          "Ref": "ebtestVpcIGWEA6A5D81"
                        },
                        "routeTableId": {
                          "Ref": "ebtestVpcPublicSubnet1RouteTableA4A6732D"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnRoute",
                      "version": "2.122.0"
                    }
                  },
                  "EIP": {
                    "id": "EIP",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet1/EIP",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::EIP",
                      "aws:cdk:cloudformation:props": {
                        "domain": "vpc",
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet1"
                          }
                        ]
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnEIP",
                      "version": "2.122.0"
                    }
                  },
                  "NATGateway": {
                    "id": "NATGateway",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet1/NATGateway",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::NatGateway",
                      "aws:cdk:cloudformation:props": {
                        "allocationId": {
                          "Fn::GetAtt": [
                            "ebtestVpcPublicSubnet1EIPAC345E83",
                            "AllocationId"
                          ]
                        },
                        "subnetId": {
                          "Ref": "ebtestVpcPublicSubnet1SubnetF5E82D6A"
                        },
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet1"
                          }
                        ]
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnNatGateway",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ec2.PublicSubnet",
                  "version": "2.122.0"
                }
              },
              "PublicSubnet2": {
                "id": "PublicSubnet2",
                "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet2",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet2/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "availabilityZone": {
                          "Fn::Select": [
                            1,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "cidrBlock": "42.0.64.0/18",
                        "mapPublicIpOnLaunch": true,
                        "tags": [
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "Public"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Public"
                          },
                          {
                            "key": "Name",
                            "value": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet2"
                          }
                        ],
                        "vpcId": {
                          "Ref": "ebtestVpcC4244F9D"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnSubnet",
                      "version": "2.122.0"
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet2/Acl",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.Resource",
                      "version": "2.122.0"
                    }
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet2/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet2"
                          }
                        ],
                        "vpcId": {
                          "Ref": "ebtestVpcC4244F9D"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnRouteTable",
                      "version": "2.122.0"
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet2/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "ebtestVpcPublicSubnet2RouteTableDD48AED1"
                        },
                        "subnetId": {
                          "Ref": "ebtestVpcPublicSubnet2SubnetA2B73953"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnSubnetRouteTableAssociation",
                      "version": "2.122.0"
                    }
                  },
                  "DefaultRoute": {
                    "id": "DefaultRoute",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet2/DefaultRoute",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Route",
                      "aws:cdk:cloudformation:props": {
                        "destinationCidrBlock": "0.0.0.0/0",
                        "gatewayId": {
                          "Ref": "ebtestVpcIGWEA6A5D81"
                        },
                        "routeTableId": {
                          "Ref": "ebtestVpcPublicSubnet2RouteTableDD48AED1"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnRoute",
                      "version": "2.122.0"
                    }
                  },
                  "EIP": {
                    "id": "EIP",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet2/EIP",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::EIP",
                      "aws:cdk:cloudformation:props": {
                        "domain": "vpc",
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet2"
                          }
                        ]
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnEIP",
                      "version": "2.122.0"
                    }
                  },
                  "NATGateway": {
                    "id": "NATGateway",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet2/NATGateway",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::NatGateway",
                      "aws:cdk:cloudformation:props": {
                        "allocationId": {
                          "Fn::GetAtt": [
                            "ebtestVpcPublicSubnet2EIPFC65A16A",
                            "AllocationId"
                          ]
                        },
                        "subnetId": {
                          "Ref": "ebtestVpcPublicSubnet2SubnetA2B73953"
                        },
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ExperimentBrokerStack/eb-test-Vpc/PublicSubnet2"
                          }
                        ]
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnNatGateway",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ec2.PublicSubnet",
                  "version": "2.122.0"
                }
              },
              "PrivateSubnet1": {
                "id": "PrivateSubnet1",
                "path": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet1",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet1/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "availabilityZone": {
                          "Fn::Select": [
                            0,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "cidrBlock": "42.0.128.0/18",
                        "mapPublicIpOnLaunch": false,
                        "tags": [
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "Private"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Private"
                          },
                          {
                            "key": "Name",
                            "value": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet1"
                          }
                        ],
                        "vpcId": {
                          "Ref": "ebtestVpcC4244F9D"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnSubnet",
                      "version": "2.122.0"
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet1/Acl",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.Resource",
                      "version": "2.122.0"
                    }
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet1/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet1"
                          }
                        ],
                        "vpcId": {
                          "Ref": "ebtestVpcC4244F9D"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnRouteTable",
                      "version": "2.122.0"
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet1/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "ebtestVpcPrivateSubnet1RouteTable86FA7DBD"
                        },
                        "subnetId": {
                          "Ref": "ebtestVpcPrivateSubnet1Subnet3682F178"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnSubnetRouteTableAssociation",
                      "version": "2.122.0"
                    }
                  },
                  "DefaultRoute": {
                    "id": "DefaultRoute",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet1/DefaultRoute",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Route",
                      "aws:cdk:cloudformation:props": {
                        "destinationCidrBlock": "0.0.0.0/0",
                        "natGatewayId": {
                          "Ref": "ebtestVpcPublicSubnet1NATGateway08088E39"
                        },
                        "routeTableId": {
                          "Ref": "ebtestVpcPrivateSubnet1RouteTable86FA7DBD"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnRoute",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ec2.PrivateSubnet",
                  "version": "2.122.0"
                }
              },
              "PrivateSubnet2": {
                "id": "PrivateSubnet2",
                "path": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet2",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet2/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "availabilityZone": {
                          "Fn::Select": [
                            1,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "cidrBlock": "42.0.192.0/18",
                        "mapPublicIpOnLaunch": false,
                        "tags": [
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "Private"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Private"
                          },
                          {
                            "key": "Name",
                            "value": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet2"
                          }
                        ],
                        "vpcId": {
                          "Ref": "ebtestVpcC4244F9D"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnSubnet",
                      "version": "2.122.0"
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet2/Acl",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.Resource",
                      "version": "2.122.0"
                    }
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet2/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet2"
                          }
                        ],
                        "vpcId": {
                          "Ref": "ebtestVpcC4244F9D"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnRouteTable",
                      "version": "2.122.0"
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet2/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "ebtestVpcPrivateSubnet2RouteTable2139F668"
                        },
                        "subnetId": {
                          "Ref": "ebtestVpcPrivateSubnet2SubnetDE2F2B88"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnSubnetRouteTableAssociation",
                      "version": "2.122.0"
                    }
                  },
                  "DefaultRoute": {
                    "id": "DefaultRoute",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/PrivateSubnet2/DefaultRoute",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Route",
                      "aws:cdk:cloudformation:props": {
                        "destinationCidrBlock": "0.0.0.0/0",
                        "natGatewayId": {
                          "Ref": "ebtestVpcPublicSubnet2NATGateway91336E7D"
                        },
                        "routeTableId": {
                          "Ref": "ebtestVpcPrivateSubnet2RouteTable2139F668"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnRoute",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ec2.PrivateSubnet",
                  "version": "2.122.0"
                }
              },
              "IGW": {
                "id": "IGW",
                "path": "ExperimentBrokerStack/eb-test-Vpc/IGW",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::InternetGateway",
                  "aws:cdk:cloudformation:props": {
                    "tags": [
                      {
                        "key": "Name",
                        "value": "eb-test-vpc"
                      }
                    ]
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ec2.CfnInternetGateway",
                  "version": "2.122.0"
                }
              },
              "VPCGW": {
                "id": "VPCGW",
                "path": "ExperimentBrokerStack/eb-test-Vpc/VPCGW",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::VPCGatewayAttachment",
                  "aws:cdk:cloudformation:props": {
                    "internetGatewayId": {
                      "Ref": "ebtestVpcIGWEA6A5D81"
                    },
                    "vpcId": {
                      "Ref": "ebtestVpcC4244F9D"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ec2.CfnVPCGatewayAttachment",
                  "version": "2.122.0"
                }
              },
              "RestrictDefaultSecurityGroupCustomResource": {
                "id": "RestrictDefaultSecurityGroupCustomResource",
                "path": "ExperimentBrokerStack/eb-test-Vpc/RestrictDefaultSecurityGroupCustomResource",
                "children": {
                  "Default": {
                    "id": "Default",
                    "path": "ExperimentBrokerStack/eb-test-Vpc/RestrictDefaultSecurityGroupCustomResource/Default",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.CfnResource",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CustomResource",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ec2.Vpc",
              "version": "2.122.0"
            }
          },
          "Custom::VpcRestrictDefaultSGCustomResourceProvider": {
            "id": "Custom::VpcRestrictDefaultSGCustomResourceProvider",
            "path": "ExperimentBrokerStack/Custom::VpcRestrictDefaultSGCustomResourceProvider",
            "children": {
              "Staging": {
                "id": "Staging",
                "path": "ExperimentBrokerStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Staging",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.AssetStaging",
                  "version": "2.122.0"
                }
              },
              "Role": {
                "id": "Role",
                "path": "ExperimentBrokerStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnResource",
                  "version": "2.122.0"
                }
              },
              "Handler": {
                "id": "Handler",
                "path": "ExperimentBrokerStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnResource",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.CustomResourceProviderBase",
              "version": "2.122.0"
            }
          },
          "eb-test-ecs-cluster": {
            "id": "eb-test-ecs-cluster",
            "path": "ExperimentBrokerStack/eb-test-ecs-cluster",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ExperimentBrokerStack/eb-test-ecs-cluster/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ECS::Cluster",
                  "aws:cdk:cloudformation:props": {}
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ecs.CfnCluster",
                  "version": "2.122.0"
                }
              },
              "eb-test-ecs-cluster": {
                "id": "eb-test-ecs-cluster",
                "path": "ExperimentBrokerStack/eb-test-ecs-cluster/eb-test-ecs-cluster",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ECS::ClusterCapacityProviderAssociations",
                  "aws:cdk:cloudformation:props": {
                    "capacityProviders": [
                      "FARGATE",
                      "FARGATE_SPOT"
                    ],
                    "cluster": {
                      "Ref": "ebtestecsclusterD26624B7"
                    },
                    "defaultCapacityProviderStrategy": []
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ecs.CfnClusterCapacityProviderAssociations",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ecs.Cluster",
              "version": "2.122.0"
            }
          },
          "Experiment_Broker_Loop": {
            "id": "Experiment_Broker_Loop",
            "path": "ExperimentBrokerStack/Experiment_Broker_Loop",
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_stepfunctions.Map",
              "version": "2.122.0"
            }
          },
          "eb-test-id": {
            "id": "eb-test-id",
            "path": "ExperimentBrokerStack/eb-test-id",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ExperimentBrokerStack/eb-test-id/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ECR::Repository",
                  "aws:cdk:cloudformation:props": {
                    "emptyOnDelete": true,
                    "imageScanningConfiguration": {
                      "scanOnPush": true
                    },
                    "repositoryName": "eb-test-payload-processor"
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ecr.CfnRepository",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ecr.Repository",
              "version": "2.122.0"
            }
          },
          "eb-test-payload-processor": {
            "id": "eb-test-payload-processor",
            "path": "ExperimentBrokerStack/eb-test-payload-processor",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ExperimentBrokerStack/eb-test-payload-processor/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ECS::TaskDefinition",
                  "aws:cdk:cloudformation:props": {
                    "containerDefinitions": [
                      {
                        "essential": true,
                        "image": {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::Select": [
                                  4,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Fn::GetAtt": [
                                          "ebtestid3A0009DB",
                                          "Arn"
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              ".dkr.ecr.",
                              {
                                "Fn::Select": [
                                  3,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Fn::GetAtt": [
                                          "ebtestid3A0009DB",
                                          "Arn"
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              ".",
                              {
                                "Ref": "AWS::URLSuffix"
                              },
                              "/",
                              {
                                "Ref": "ebtestid3A0009DB"
                              },
                              ":latest"
                            ]
                          ]
                        },
                        "name": {
                          "Ref": "ebtestid3A0009DB"
                        },
                        "logConfiguration": {
                          "logDriver": "awslogs",
                          "options": {
                            "awslogs-group": {
                              "Ref": "ebtestpayloadprocessorloggroup86D1ED75"
                            },
                            "awslogs-stream-prefix": "ART-payload-processor",
                            "awslogs-region": {
                              "Ref": "AWS::Region"
                            },
                            "mode": "non-blocking"
                          }
                        }
                      }
                    ],
                    "cpu": "256",
                    "executionRoleArn": {
                      "Fn::GetAtt": [
                        "ebtestserviceroleC9BF3597",
                        "Arn"
                      ]
                    },
                    "family": "ExperimentBrokerStackebtestpayloadprocessorD2B9189A",
                    "memory": "512",
                    "networkMode": "awsvpc",
                    "requiresCompatibilities": [
                      "FARGATE"
                    ],
                    "taskRoleArn": {
                      "Fn::GetAtt": [
                        "ebtestserviceroleC9BF3597",
                        "Arn"
                      ]
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ecs.CfnTaskDefinition",
                  "version": "2.122.0"
                }
              },
              "${Token[TOKEN.252]}": {
                "id": "${Token[TOKEN.252]}",
                "path": "ExperimentBrokerStack/eb-test-payload-processor/${Token[TOKEN.252]}",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ecs.ContainerDefinition",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ecs.FargateTaskDefinition",
              "version": "2.122.0"
            }
          },
          "eb-test-payload-processor-log-group": {
            "id": "eb-test-payload-processor-log-group",
            "path": "ExperimentBrokerStack/eb-test-payload-processor-log-group",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ExperimentBrokerStack/eb-test-payload-processor-log-group/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Logs::LogGroup",
                  "aws:cdk:cloudformation:props": {
                    "logGroupName": "ecs/eb-test/payload-processor",
                    "retentionInDays": 731
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_logs.CfnLogGroup",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_logs.LogGroup",
              "version": "2.122.0"
            }
          },
          "eb-test-run-payload-processor": {
            "id": "eb-test-run-payload-processor",
            "path": "ExperimentBrokerStack/eb-test-run-payload-processor",
            "children": {
              "SecurityGroup": {
                "id": "SecurityGroup",
                "path": "ExperimentBrokerStack/eb-test-run-payload-processor/SecurityGroup",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "ExperimentBrokerStack/eb-test-run-payload-processor/SecurityGroup/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                      "aws:cdk:cloudformation:props": {
                        "groupDescription": "ExperimentBrokerStack/eb-test-run-payload-processor/SecurityGroup",
                        "securityGroupEgress": [
                          {
                            "cidrIp": "0.0.0.0/0",
                            "description": "Allow all outbound traffic by default",
                            "ipProtocol": "-1"
                          }
                        ],
                        "vpcId": {
                          "Ref": "ebtestVpcC4244F9D"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_ec2.CfnSecurityGroup",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ec2.SecurityGroup",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_stepfunctions_tasks.EcsRunTask",
              "version": "2.122.0"
            }
          },
          "eb-test-processing-failed": {
            "id": "eb-test-processing-failed",
            "path": "ExperimentBrokerStack/eb-test-processing-failed",
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_stepfunctions.Fail",
              "version": "2.122.0"
            }
          },
          "post-processor": {
            "id": "post-processor",
            "path": "ExperimentBrokerStack/post-processor",
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_stepfunctions.Choice",
              "version": "2.122.0"
            }
          },
          "wait_and_retry": {
            "id": "wait_and_retry",
            "path": "ExperimentBrokerStack/wait_and_retry",
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_stepfunctions.Wait",
              "version": "2.122.0"
            }
          },
          "ProcessorCompleted": {
            "id": "ProcessorCompleted",
            "path": "ExperimentBrokerStack/ProcessorCompleted",
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_stepfunctions.Pass",
              "version": "2.122.0"
            }
          },
          "ExitState": {
            "id": "ExitState",
            "path": "ExperimentBrokerStack/ExitState",
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_stepfunctions.Pass",
              "version": "2.122.0"
            }
          },
          "run_app_tests_choice": {
            "id": "run_app_tests_choice",
            "path": "ExperimentBrokerStack/run_app_tests_choice",
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_stepfunctions.Choice",
              "version": "2.122.0"
            }
          },
          "eb-test_State_Machine": {
            "id": "eb-test_State_Machine",
            "path": "ExperimentBrokerStack/eb-test_State_Machine",
            "children": {
              "Role": {
                "id": "Role",
                "path": "ExperimentBrokerStack/eb-test_State_Machine/Role",
                "children": {
                  "ImportRole": {
                    "id": "ImportRole",
                    "path": "ExperimentBrokerStack/eb-test_State_Machine/Role/ImportRole",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.Resource",
                      "version": "2.122.0"
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "ExperimentBrokerStack/eb-test_State_Machine/Role/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "states.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                      "version": "2.122.0"
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "ExperimentBrokerStack/eb-test_State_Machine/Role/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "ExperimentBrokerStack/eb-test_State_Machine/Role/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": "ecs:RunTask",
                                  "Effect": "Allow",
                                  "Resource": {
                                    "Fn::Join": [
                                      "",
                                      [
                                        "arn:",
                                        {
                                          "Fn::Select": [
                                            1,
                                            {
                                              "Fn::Split": [
                                                ":",
                                                {
                                                  "Ref": "ebtestpayloadprocessorECA18C4F"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        ":",
                                        {
                                          "Fn::Select": [
                                            2,
                                            {
                                              "Fn::Split": [
                                                ":",
                                                {
                                                  "Ref": "ebtestpayloadprocessorECA18C4F"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        ":",
                                        {
                                          "Fn::Select": [
                                            3,
                                            {
                                              "Fn::Split": [
                                                ":",
                                                {
                                                  "Ref": "ebtestpayloadprocessorECA18C4F"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        ":",
                                        {
                                          "Fn::Select": [
                                            4,
                                            {
                                              "Fn::Split": [
                                                ":",
                                                {
                                                  "Ref": "ebtestpayloadprocessorECA18C4F"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        ":",
                                        {
                                          "Fn::Select": [
                                            0,
                                            {
                                              "Fn::Split": [
                                                "/",
                                                {
                                                  "Fn::Select": [
                                                    5,
                                                    {
                                                      "Fn::Split": [
                                                        ":",
                                                        {
                                                          "Ref": "ebtestpayloadprocessorECA18C4F"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        "/",
                                        {
                                          "Fn::Select": [
                                            1,
                                            {
                                              "Fn::Split": [
                                                "/",
                                                {
                                                  "Fn::Select": [
                                                    5,
                                                    {
                                                      "Fn::Split": [
                                                        ":",
                                                        {
                                                          "Ref": "ebtestpayloadprocessorECA18C4F"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    ]
                                  }
                                },
                                {
                                  "Action": [
                                    "ecs:DescribeTasks",
                                    "ecs:StopTask"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": "*"
                                },
                                {
                                  "Action": "iam:PassRole",
                                  "Effect": "Allow",
                                  "Resource": {
                                    "Fn::GetAtt": [
                                      "ebtestserviceroleC9BF3597",
                                      "Arn"
                                    ]
                                  }
                                },
                                {
                                  "Action": [
                                    "events:DescribeRule",
                                    "events:PutRule",
                                    "events:PutTargets"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": {
                                    "Fn::Join": [
                                      "",
                                      [
                                        "arn:",
                                        {
                                          "Ref": "AWS::Partition"
                                        },
                                        ":events:",
                                        {
                                          "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                          "Ref": "AWS::AccountId"
                                        },
                                        ":rule/StepFunctionsGetEventsForECSTaskRule"
                                      ]
                                    ]
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "ebtestStateMachineRoleDefaultPolicyF5A5995E",
                            "roles": [
                              {
                                "Ref": "ebtestStateMachineRole29312413"
                              }
                            ]
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_iam.CfnPolicy",
                          "version": "2.122.0"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.Policy",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.Role",
                  "version": "2.122.0"
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "ExperimentBrokerStack/eb-test_State_Machine/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::StepFunctions::StateMachine",
                  "aws:cdk:cloudformation:props": {
                    "definitionString": {
                      "Fn::Join": [
                        "",
                        [
                          "{\"StartAt\":\"Run_Tests\",\"States\":{\"Run_Tests\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.Payload.state\",\"StringEquals\":\"pending\",\"Next\":\"Experiment Loop\"},{\"Variable\":\"$.Payload.state\",\"StringEquals\":\"done\",\"Next\":\"Exit\"}]},\"Experiment Loop\":{\"Type\":\"Map\",\"End\":true,\"ItemsPath\":\"$.Payload.list\",\"ItemProcessor\":{\"ProcessorConfig\":{\"Mode\":\"INLINE\"},\"StartAt\":\"Process Payload\",\"States\":{\"Process Payload\":{\"Next\":\"Post Process\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"Next\":\"Processing Failed\"}],\"Type\":\"Task\",\"ResultPath\":\"$.Payload\",\"Resource\":\"arn:",
                          {
                            "Ref": "AWS::Partition"
                          },
                          ":states:::ecs:runTask.sync\",\"Parameters\":{\"Cluster\":\"",
                          {
                            "Fn::GetAtt": [
                              "ebtestecsclusterD26624B7",
                              "Arn"
                            ]
                          },
                          "\",\"TaskDefinition\":\"ExperimentBrokerStackebtestpayloadprocessorD2B9189A\",\"NetworkConfiguration\":{\"AwsvpcConfiguration\":{\"Subnets\":[\"",
                          {
                            "Ref": "ebtestVpcPrivateSubnet1Subnet3682F178"
                          },
                          "\",\"",
                          {
                            "Ref": "ebtestVpcPrivateSubnet2SubnetDE2F2B88"
                          },
                          "\"],\"SecurityGroups\":[\"",
                          {
                            "Fn::GetAtt": [
                              "ebtestrunpayloadprocessorSecurityGroup2F38EAFD",
                              "GroupId"
                            ]
                          },
                          "\"]}},\"Overrides\":{\"ContainerOverrides\":[{\"Name\":\"",
                          {
                            "Ref": "ebtestid3A0009DB"
                          },
                          "\",\"Environment\":[{\"Name\":\"task_token\",\"Value.$\":\"$$.Task.Token\"},{\"Name\":\"bucket_name\",\"Value.$\":\"$.bucket_name\"},{\"Name\":\"experiment_source\",\"Value.$\":\"$.experiment_source\"},{\"Name\":\"output_bucket\",\"Value.$\":\"$.output_config.S3.bucket_name\"},{\"Name\":\"jira_exec_ticket\",\"Value.$\":\"$.jira_exec_ticket\"},{\"Name\":\"jira_test_ticket\",\"Value.$\":\"$.jira_test_ticket\"},{\"Name\":\"output_path\",\"Value.$\":\"$.output_config.S3.path\"}]}]},\"LaunchType\":\"FARGATE\",\"PlatformVersion\":\"LATEST\"}},\"Wait & Retry\":{\"Type\":\"Wait\",\"Comment\":\"wait and retry for processor task\",\"Seconds\":15,\"Next\":\"Process Payload\"},\"Post Process\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.Payload.state\",\"StringEquals\":\"done\",\"Next\":\"Complete\"},{\"Variable\":\"$.Payload.state\",\"StringEquals\":\"pending\",\"Next\":\"Wait & Retry\"}]},\"Complete\":{\"Type\":\"Pass\",\"End\":true},\"Processing Failed\":{\"Type\":\"Fail\"}}},\"MaxConcurrency\":1},\"Exit\":{\"Type\":\"Pass\",\"End\":true}}}"
                        ]
                      ]
                    },
                    "roleArn": {
                      "Fn::GetAtt": [
                        "ebtestStateMachineRole29312413",
                        "Arn"
                      ]
                    },
                    "stateMachineName": "eb-test-State_Machine"
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_stepfunctions.CfnStateMachine",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_stepfunctions.StateMachine",
              "version": "2.122.0"
            }
          },
          "eb-test-gpnBlackHoleByURL": {
            "id": "eb-test-gpnBlackHoleByURL",
            "path": "ExperimentBrokerStack/eb-test-gpnBlackHoleByURL",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "Block access to a group of URLs on an instance",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "The duration - in seconds - of the attack. (Required)",
                      "default": "1",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "urls": {
                      "type": "String",
                      "description": "The urls you want to block, separated by a space"
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "name": "RevertCommandScheduling",
                      "inputs": {}
                    },
                    {
                      "action": "aws:runShellScript",
                      "name": "AlterIptables",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\n\nfor url in {{ urls }}; do\n  iptables -I OUTPUT 1 -d $url -j DROP;\n  iptables -I FORWARD 1 -d $url -j DROP; \n  iptables -t mangle -I OUTPUT 1 -d $url -j DROP;\n  iptables -t mangle -I FORWARD 1 -d $url -j DROP;\n  done"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-gpnBlackHoleByURL"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-DeletePod": {
            "id": "eb-test-DeletePod",
            "path": "ExperimentBrokerStack/eb-test-DeletePod",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "schemaVersion": "2.2",
                  "description": "### Document name - AWSFIS-Run-PacketLoss\n## What does this document do?\n## Output Parameters\nNone.\n",
                  "parameters": {
                    "namespace": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z]{1,128}$",
                      "default": "resiliency"
                    },
                    "podNamePattern": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z-]{1,128}$",
                      "default": "authplugincontainer"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "name": "deletePod",
                      "description": "## Parameters: Portnumber,Time\n",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "kubectl get pods -n {{ namespace }} --no-headers=true | awk '/{{ podNamePattern }}/{print $2}' | awk 'NR==1{print $1}' | xargs kubectl -n {{ namespace }}  delete pod\n"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-DeletePod"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-BlockNetworkTrafficOnInstance": {
            "id": "eb-test-BlockNetworkTrafficOnInstance",
            "path": "ExperimentBrokerStack/eb-test-BlockNetworkTrafficOnInstance",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "Block all network traffice on an instance (i.e., create a Black Hole)",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "The amount of time (in minutes) for which the network traffic will be blocked.",
                      "default": "1",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.  In this case iptables is being installed and an attempt is\nmade to start the service.  iptables should always be installed on the os by default, so this should never happen.\n",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which iptables 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install iptables-services\n      sudo systemctl start iptables\n      sudo systemctl start ip6tables\n      sudo systemctl enable iptables\n      sudo systemctl enable ip6tables\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y iptables\n    sudo ufw enable\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "name": "blockAllNetworkTraffic",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "sudo /sbin/iptables -F\nsudo /sbin/iptables -A INPUT -i eth0 -j DROP\nsudo /sbin/iptables -A OUTPUT -i eth0 -j DROP\nsudo /sbin/iptables -A FORWARD -i eth0 -j DROP"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-BlockNetworkTrafficOnInstance"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-PodStressCPU": {
            "id": "eb-test-PodStressCPU",
            "path": "ExperimentBrokerStack/eb-test-PodStressCPU",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "Performs a cpu stress test on one or 2 Core DNS Containers\n on an instance via utilizing the stress-ng tool.\n## Input Parameters\n* Duration: The duration - in seconds - of the memory stress (default: 60).\n* cpu: Specify the number of CPU stressors to use (default 0 = all)\n* InstallDependencies: If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).\n",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "The amount of time which for memory will be stressed in seconds. (Required)",
                      "default": "60"
                    },
                    "cpu": {
                      "type": "String",
                      "description": "Specify the number of CPU stressors to use (default: 0 which means \"all CPUs\")",
                      "default": "0",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "containerNamePattern": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z_]{1,128}$",
                      "default": "k8s_coredns"
                    },
                    "numContainersToTarget": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z]{1,128}$",
                      "default": "1"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.  In this case iptables is being installed and an attempt is\nmade to start the service.  iptables should always be installed on the os by default, so this should never happen.\n",
                      "inputs": {
                        "runCommand": [
                          "",
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which stress-ng 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install stress-ng\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive sudo apt-get install -y stress-ng\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "name": "StressCPU",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 180,
                        "runCommand": [
                          "sudo -s -H <<'EOF'\n\nif [ {{ duration }} -lt 1 ] || [ {{ duration }} -gt 43200 ] ; then echo Duration parameter value must be between 1 and 43200 seconds && exit; fi\n\necho {{ containerNamePattern }}\n\nfirstPid=$(docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}' | awk '/{{ containerNamePattern }}/{print $1}' | awk 'NR==1{print $1}' | sed 's/,//')\necho \"${firstPid}\"\nsecondPid=$(docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}' | awk '/{{ containerNamePattern }}/{print $1}' | awk 'NR==2{print $1}' | sed 's/,//')\necho \"${secondPid}\"\n\nif [ -z \"$firstPid\" ]\nthen\n  echo \"firstPid is NULL\"\n  exit 0\nfi\n\necho Initiating CPU stress for {{ duration }} seconds...\n\nnsenter -t ${firstPid} -n sudo pgrep stress-ng && echo Another stress-ng command is running, exiting... && exit\n\nnsenter -t ${firstPid} -n sudo stress-ng --cpu {{ cpu }} --cpu-method matrixprod -t {{ duration }}s \necho Finished CPU stress.\n\nif  [[ \"{{ numContainersToTarget}}\" == '2' ]] ; then\n  echo \"Two containers are being targeted on this test...\"\n\n  nsenter -t ${secondPid} -n sudo pgrep stress-ng && echo Another stress-ng command is running, exiting... && exit\n\n  nsenter -t ${secondPid} -n sudo stress-ng --cpu {{ cpu }} --cpu-method matrixprod -t {{ duration }}s \n  echo Finished CPU stress.\nfi\n\nEOF"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-PodStressCPU"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-KillProcessByName": {
            "id": "eb-test-KillProcessByName",
            "path": "ExperimentBrokerStack/eb-test-KillProcessByName",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "## What does this document do?\nIt kills a particular process by name in an instance, using the `killall` command.\n## Input Parameters\n* Process: (Required) Name of the process to kill.\n* Signal: The SIGNAL to be sent along with the kill command (default: SIGTERM). The allowed values are:\n  * SIGTERM: Signal used for gracefully terminate a process. Can be referred as soft kill, because the receiver may choose to ignore it.\n  * SIGKILL: Signal used for immediate termination of a process. Cannot be caught, ignored or blocked. Child processes are killed as well.\n",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "processName": {
                      "type": "String",
                      "description": "(Required) Name of the process to kill, using the `killall` command. ",
                      "allowedPattern": "^[0-9a-zA-Z.\\-=_]{1,128}$"
                    },
                    "signal": {
                      "type": "String",
                      "description": "The SIGNAL to be sent along with the kill command (default: SIGTERM).\nThe allowed values are:\n* SIGTERM: Signal used for graceful process termination. Can be referred as soft kill, because the receiver may choose to ignore it.\n* SIGKILL: Signal used for immediate process termination. Cannot be caught, ignored or blocked. Child processes are killed as well.\n",
                      "default": "SIGTERM",
                      "allowedValues": [
                        "SIGTERM",
                        "SIGKILL"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "KillProcess",
                      "description": "## Parameters: Process\nThis step will kill the specified process, using the `killall` command.\n",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "killall -{{ signal }} {{ processName }}"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-KillProcessByName"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-DetachVolume": {
            "id": "eb-test-DetachVolume",
            "path": "ExperimentBrokerStack/eb-test-DetachVolume",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "### Document name - AWSFIS-EBS-Volume-Crash\n## What does this document do?\nIt unmounts and Detach an EBS Volume with a command.\n## Input Parameters\n* Device: (Required) Name of the Volume to unmount.\n* InstanceId: The InstanceId to be whose volume is to be detached\n## Output Parameters\nNone.\n",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "device": {
                      "type": "String",
                      "description": "(Required) Name of the Device to detach, using the `umount` command",
                      "allowedPattern": "^[0-9a-zA-Z.\\-=_/]{1,128}$"
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "name": "DetachVolume",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "description": "## Parameters: Device\nThis step will attempt to detach the volume, using the linux 'umount' command.\n",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "sudo umount -l {{ device }}\necho Done with command: \"DetachVolume\"\n"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-DetachVolume"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-BlackHoleByIPAddress": {
            "id": "eb-test-BlackHoleByIPAddress",
            "path": "ExperimentBrokerStack/eb-test-BlackHoleByIPAddress",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "Block access to a series of ip addresses on an instance.",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "The duration in seconds of the access block.",
                      "default": "180",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "ipAddresses": {
                      "type": "String",
                      "description": "The list of internet addresses to block.  The list must be space delimeted.",
                      "default": "3.218.180.0/22 52.119.232.0/21 52.119.224.0/21 52.94.0.0/22"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.  In this case iptables is being installed and an attempt is\nmade to start the service.  iptables should always be installed on the os by default, so this should never happen.\n",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which iptables 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install iptables-services\n      sudo systemctl start iptables\n      sudo systemctl start ip6tables\n      sudo systemctl enable iptables\n      sudo systemctl enable ip6tables\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y iptables\n    sudo ufw enable\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "name": "AlterIPtables",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 300,
                        "runCommand": [
                          "sudo -s -H <<'EOF'\niptables -S\niptables-save>outputfile;\n\nfor ipa in {{ ipAddresses }}; do\n  sudo iptables -I OUTPUT 1 -d  $ipa -j DROP;\n  sudo iptables -I FORWARD 1 -d  $ipa -j DROP;\n  sudo iptables -t mangle -I OUTPUT 1 -d  $ipa -j DROP;\n  sudo iptables -t mangle -I FORWARD 1 -d  $ipa -j DROP;\n  sudo echo \"$ipa\";\ndone\n\nsleep {{ duration }}s\n\nsudo iptables-restore<outputfile;\n\nsudo rm outputfile;"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-BlackHoleByIPAddress"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-PodBlackholeByPort": {
            "id": "eb-test-PodBlackholeByPort",
            "path": "ExperimentBrokerStack/eb-test-PodBlackholeByPort",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "Block DNS on one or 2 Core DNS Containers",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "The amount of time which the port will be blocked for in minutes. (Required)",
                      "default": "2",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "protocol": {
                      "type": "String",
                      "description": "The protocol.",
                      "default": "udp tcp"
                    },
                    "sourcePorts": {
                      "type": "String",
                      "description": "The ports to block.",
                      "default": ""
                    },
                    "destinationPorts": {
                      "type": "String",
                      "description": "The ports to block.",
                      "default": ""
                    },
                    "containerNamePattern": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z_]{1,128}$",
                      "default": "k8s_coredns"
                    },
                    "numContainersToTarget": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z]{1,128}$",
                      "default": "1"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.  In this case iptables is being installed and an attempt is\nmade to start the service.  iptables should always be installed on the os by default, so this should never happen.\n",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which iptables 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install iptables-services\n      sudo systemctl start iptables\n      sudo systemctl start ip6tables\n      sudo systemctl enable iptables\n      sudo systemctl enable ip6tables\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y iptables\n    sudo ufw enable\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "name": "AlterIPtables",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 180,
                        "runCommand": [
                          "sudo -s -H <<'EOF'\n\necho {{ containerNamePattern }}\n\nfirstPid=$(docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}' | awk '/{{ containerNamePattern }}/{print $1}' | awk 'NR==1{print $1}' | sed 's/,//')\necho \"${firstPid}\"\nsecondPid=$(docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}' | awk '/{{ containerNamePattern }}/{print $1}' | awk 'NR==2{print $1}' | sed 's/,//')\necho \"${secondPid}\"\n\nif [ -z \"$firstPid\" ]\nthen\n  echo \"firstPid is NULL\"\n  exit 0\nfi\n\nnsenter -t ${firstPid} -n iptables-save>outputfile;\n\nfor protocol in {{ protocol }}; do\n  if [[ ! -z \"{{ destinationPorts }}\" ]]\n  then\n    nsenter -t ${firstPid} -n iptables -I OUTPUT 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n    nsenter -t ${firstPid} -n iptables -I FORWARD 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n    nsenter -t ${firstPid} -n iptables -I INPUT 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n    nsenter -t ${firstPid} -n iptables -t mangle -I OUTPUT 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n    nsenter -t ${firstPid} -n iptables -t mangle -I FORWARD 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n    nsenter -t ${firstPid} -n iptables -t mangle -I INPUT 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n  fi\n\n  if [[ ! -z \"{{ sourcePorts }}\" ]]\n  then\n    nsenter -t ${firstPid} -n iptables -I OUTPUT 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n    nsenter -t ${firstPid} -n iptables -I FORWARD 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n    nsenter -t ${firstPid} -n iptables -I INPUT 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n    nsenter -t ${firstPid} -n iptables -t mangle -I OUTPUT 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n    nsenter -t ${firstPid} -n iptables -t mangle -I FORWARD 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n    nsenter -t ${firstPid} -n iptables -t mangle -I INPUT 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n  fi\n  done\n\n  nsenter -t ${firstPid} -n iptables -S;\n\nif  [[ \"{{ numContainersToTarget}}\" == '2' ]] ; then\n  echo \"Two containers are being targeted on this test...\"\n\n  for protocol in {{ protocol }}; do\n    if [[ ! -z \"{{ destinationPorts }}\" ]]\n    then\n      nsenter -t ${secondPid} -n iptables -I OUTPUT 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n      nsenter -t ${secondPid} -n iptables -I FORWARD 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n      nsenter -t ${secondPid} -n iptables -I INPUT 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n      nsenter -t ${secondPid} -n iptables -t mangle -I OUTPUT 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n      nsenter -t ${secondPid} -n iptables -t mangle -I FORWARD 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n      nsenter -t ${secondPid} -n iptables -t mangle -I INPUT 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n    fi\n\n    if [[ ! -z \"{{ sourcePorts }}\" ]]\n    then\n      nsenter -t ${secondPid} -n iptables -I OUTPUT 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n      nsenter -t ${secondPid} -n iptables -I FORWARD 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n      nsenter -t ${secondPid} -n iptables -I INPUT 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n      nsenter -t ${secondPid} -n iptables -t mangle -I OUTPUT 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n      nsenter -t ${secondPid} -n iptables -t mangle -I FORWARD 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n      nsenter -t ${secondPid} -n iptables -t mangle -I INPUT 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n    fi\n    done\n\n    nsenter -t ${secondPid} -n iptables -S;\nfi\n\necho \"Before sleep...\"\nnsenter -t ${firstPid} -n sleep {{ duration }}m;\nif  [[ \"{{ numContainersToTarget}}\" == '2' ]] ; then\n  nsenter -t ${secondPid} -n sleep {{ duration }}m;\nfi\necho \"After sleep...\"\n\necho \"Before restoring iptables rules...\"\nnsenter -t ${firstPid} -n iptables-restore<outputfile;\nif  [[ \"{{ numContainersToTarget}}\" == '2' ]] ; then\n  nsenter -t ${secondPid} -n iptables-restore<outputfile;\nfi\necho \"After restoring iptables rules...\"\n\necho \"Before deleting outputfile\"\nnsenter -t ${firstPid} -n rm outputfile;\nif  [[ \"{{ numContainersToTarget}}\" == '2' ]] ; then\n  nsenter -t ${secondPid} -n rm outputfile;\nfi\necho \"After deleting output file\"\n\nEOF"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-PodBlackholeByPort"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-DiskVolumeExhaustion": {
            "id": "eb-test-DiskVolumeExhaustion",
            "path": "ExperimentBrokerStack/eb-test-DiskVolumeExhaustion",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "## What does this document do?\nIt runs disk filling stress on an instance via stress-ng tool.\nstress-ng --fallocate {{ Workers }} --fallocate-bytes {{ Filesize }} -t {{ Duration }}s\n## Input Parameters\n* Duration: (Required) The duration - in seconds - of the Disk stress.\n* Workers: Specify the number of workers continually fallocating (preallocating file space).\n* Filesize: Allocated  file  size in GB (default  is 1).\n* InstallDependencies: If set to True, Systems Manager installs the required dependencies on the target instances. (default True)\n",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "(Required) The duration - in seconds - of the Disk stress.",
                      "allowedPattern": "^[0-9]+$",
                      "default": "60"
                    },
                    "workers": {
                      "type": "String",
                      "description": "Specify the number of Fallocate workers to use (default: 4)",
                      "default": "4",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "filesize": {
                      "type": "String",
                      "description": "Specify the Filesize in GB to use (default: 1)",
                      "default": "1",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances (default: True)",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: installDependencies\nIf set to True, this step installs the required dependency via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.\n",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which stress-ng 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install stress-ng\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive sudo apt-get install -y stress-ng\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "ExecuteStressNg",
                      "description": "## Parameters: Duration, Workers, Filesize\nThis step will stress the Disk with the specified Filesize for the specified Duration time\nin seconds.\n",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "if [ {{ duration }} -lt 1 ] || [ {{ duration }} -gt 43200 ] ; then echo duration parameter value must be between 1 and 43200 seconds && exit; fi\nsudo pgrep stress-ng && echo Another stress-ng command is running, exiting... && exit\necho Initiating Disk stress for {{ duration }} seconds...\nsudo stress-ng --fallocate {{ workers }} --fallocate-bytes {{ filesize }}g -t {{ duration }}s\necho Finished Disk stress.\n"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-DiskVolumeExhaustion"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-InstallStressNG": {
            "id": "eb-test-InstallStressNG",
            "path": "ExperimentBrokerStack/eb-test-InstallStressNG",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "## What does this document do?\nInstalls Stress-NG on a pod\n",
                  "schemaVersion": "2.2",
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installStressNG",
                      "description": "This step installs the required dependecy via a bash script.\n",
                      "inputs": {
                        "runCommand": [
                          "#/bin/bash\nDIR=\"/tmp/resiliency/\"\nPOD=$(sudo -u admin kubectl get pods -n resiliency | grep authplugincontainer | awk '{print $1}')\n\nif /bin/mkdir $DIR; then\n  if sudo -u admin kubectl exec -it --namespace resiliency $POD -- /bin/mkdir $DIR; then\n\n    cd $DIR\n    apt-get download $(apt-cache depends --recurse --no-recommends --no-suggests \\\n    --no-conflicts --no-breaks --no-replaces --no-enhances \\\n    --no-pre-depends stress-ng| grep \"^\\w\" | egrep -v \"gcc|libc6|zlib\")\n    for package in ./*deb; do\n      sudo -u admin kubectl cp $package resiliency/$POD:$DIR; done\n          sudo -u admin kubectl exec -it --namespace resiliency $POD -- /bin/bash -c 'dpkg -i '$DIR'*.deb'\n  fi\nfi\n"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-InstallStressNG"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-StressAllNetworkIO": {
            "id": "eb-test-StressAllNetworkIO",
            "path": "ExperimentBrokerStack/eb-test-StressAllNetworkIO",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "Blackhole all Inbound and Outbound Network Traffic",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "The duration - in seconds - of the test.",
                      "default": "60"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: installDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.  In this case iptables is being installed and an attempt is\nmade to start the service.  iptables should always be installed on the os by default, so this should never happen.\n",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which iptables 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install iptables-services\n      sudo systemctl start iptables\n      sudo systemctl start ip6tables\n      sudo systemctl enable iptables\n      sudo systemctl enable ip6tables\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y iptables\n    sudo ufw enable\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "name": "AlterIPtables",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "#!/bin/bash\n  sudo iptables -I INPUT -m state --state NEW -j DROP\n  sudo iptables -I OUTPUT -m state --state NEW -j DROP\n  sudo iptables -I FORWARD -m state --state NEW -j DROP \n  sudo sleep {{ duration }}s\n  sudo iptables -D INPUT -m state --state NEW -j DROP\n  sudo iptables -D OUTPUT -m state --state NEW -j DROP\n  sudo iptables -D FORWARD -m state --state NEW -j DROP "
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-StressAllNetworkIO"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-StressNetworkUtilization": {
            "id": "eb-test-StressNetworkUtilization",
            "path": "ExperimentBrokerStack/eb-test-StressNetworkUtilization",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "## What does this document do?\nIt simulates high network utilization by limiting bandwidth on the network.\n## Input Parameters\n* Interface: The interface to add delay to (default: eth0).\n* Rate: The outgoing rate - in kbits - to set to the interface (default: 1024).\n* Duration: The duration - in seconds - of the test (default: 60).\n* Port Number:\n* Port Type: Source port or destination port.\n* InstallDependencies: If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).\n",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "interface": {
                      "type": "String",
                      "description": "The interface to add delay to (default: eth0).",
                      "default": "eth0",
                      "allowedPattern": "^[0-9a-zA-Z\\-]{1,15}$"
                    },
                    "portNumber": {
                      "type": "String",
                      "description": "The port number on which to limit the bandwidth. (default:80).\nThe allowed values are:\n* PortNumber: The Port No on which the network bandwidth is to be limited.\n",
                      "default": "0",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "portType": {
                      "type": "String",
                      "description": "The port type on which to limit the bandwith. (default:sport).\nThe allowed values are: dport, sport.\n",
                      "default": "sport",
                      "allowedValues": [
                        "dport",
                        "sport"
                      ]
                    },
                    "rate": {
                      "type": "String",
                      "description": "The outgoing rate - in kbits - to add to set the interface (default: 1024).",
                      "default": "1024",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "duration": {
                      "type": "String",
                      "description": "The duration - in seconds - of the test (default: 60).",
                      "default": "60",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.\n",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which tc 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install tc\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive sudo apt-get install -y iproute2\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "AlterNetworkInterface",
                      "description": "## Parameters: interface, delay and duration\nThis step changes the outgoing rate (in kbits) to `Interface` for the given `Duration` (in seconds),\nusing the `tc` (Traffic Control) command.  The script will limit the outgoing bandwidth on the network,\nand wait for the given duration to remove that.\n",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "#!/bin/bash\necho \"Injecting high network utilization ...\"\nif  [[ \"{{ portNumber }}\" == 0 ]] ; then\n  sudo tc qdisc add dev {{ interface }} root tbf rate {{ rate }}kbit latency 50ms burst 1540\n  sudo sleep {{ duration }}s\n  sudo tc qdisc del dev {{ interface }} root\nelse  \n  sudo tc qdisc add dev {{ interface }} root handle 1: prio priomap 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n  sudo tc qdisc add dev {{ interface }} parent 1:2 handle 20: tbf rate {{ rate }}kbit latency 50ms burst 1540\n  sudo tc filter add dev {{ interface }} parent 1:0 protocol ip u32 match ip {{portType}} {{ portNumber }} 0xffff flowid 1:2\n  sudo sleep {{ duration }}s\n  sudo tc qdisc del dev {{ interface }} root\nfi"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-StressNetworkUtilization"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-BlackHoleKafka": {
            "id": "eb-test-BlackHoleKafka",
            "path": "ExperimentBrokerStack/eb-test-BlackHoleKafka",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "Block access to kafka on an instance",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "The duration - in minute - of the attack. (Required)",
                      "default": "1",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "kafkanodes": {
                      "type": "String",
                      "description": "The urls of the Kafka brokers you want to block, separated by a space"
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "name": "RevertCommandScheduling",
                      "inputs": {}
                    },
                    {
                      "action": "aws:runShellScript",
                      "name": "AlterIptables",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\n\nfor url in {{ kafkanodes }}; do\n  iptables -I OUTPUT 1 -d $url -j DROP;\n  iptables -I FORWARD 1 -d $url -j DROP; \n  iptables -t mangle -I OUTPUT 1 -d $url -j DROP;\n  iptables -t mangle -I FORWARD 1 -d $url -j DROP;\n  done"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-BlackHoleKafka"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-PodHealthCheck": {
            "id": "eb-test-PodHealthCheck",
            "path": "ExperimentBrokerStack/eb-test-PodHealthCheck",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "schemaVersion": "2.2",
                  "description": "### Document name - podHealthCheck\n## What does this document do?\n## Output Parameters\n* None.\n",
                  "parameters": {
                    "clustername": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z]{1,128}$",
                      "default": "blueprint"
                    },
                    "namespace": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z]{1,128}$",
                      "default": "public"
                    },
                    "podNamePattern": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z-]{1,128}$",
                      "default": "spring-frontend"
                    },
                    "podHealthPort": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z]{1,128}$",
                      "default": "80"
                    },
                    "podHealthPath": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z]{1,128}$",
                      "default": "health"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.\n",
                      "inputs": {
                        "runCommand": [
                          "",
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which stress-ng 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nEOF\n      sudo yum install -y kubectl\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo apt-get install -y ca-certificates curl\n    sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg\n    echo \"deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\n    sudo apt-get update -y\n    sudo apt-get install -y kubectl\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\nsudo aws eks --region us-east-1 update-kubeconfig --name {{ clustername }}\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "name": "podHealthCheck",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "sudo kubectl get pods -n {{ namespace }} --no-headers=true -o wide --kubeconfig /root/.kube/config |  awk '/{{ podNamePattern }}/{print $6}' | xargs -I % wget -q -O - http://%:{{ podHealthPort }}/{{ podHealthPath }} | jq -r '.status'\n"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-PodHealthCheck"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-BlackHoleByPort": {
            "id": "eb-test-BlackHoleByPort",
            "path": "ExperimentBrokerStack/eb-test-BlackHoleByPort",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "Block all communication on an instance by port and protocol.",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "The duration - in seconds - of the attack. (Required)",
                      "default": "60",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "protocol": {
                      "type": "String",
                      "description": "The protocol.",
                      "default": "tcp"
                    },
                    "sourcePorts": {
                      "type": "String",
                      "description": "The source ports to block.",
                      "default": ""
                    },
                    "destinationPorts": {
                      "type": "String",
                      "description": "The destination ports to block.",
                      "default": ""
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.  In this case iptables is being installed and an attempt is\nmade to start the service.  iptables should always be installed on the os by default, so this should never happen.\n",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which iptables 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install iptables-services\n      sudo systemctl start iptables\n      sudo systemctl start ip6tables\n      sudo systemctl enable iptables\n      sudo systemctl enable ip6tables\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y iptables\n    sudo ufw enable\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "name": "AlterIPtables",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 300,
                        "runCommand": [
                          "sudo -s -H <<'EOF'\niptables -S\niptables-save>outputfile;\n\nfor protocol in {{ protocol }}; do\n  if [[ ! -z \"{{ destinationPorts }}\" ]]\n  then\n    iptables -I OUTPUT 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n    iptables -I FORWARD 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n    iptables -I INPUT 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n    iptables -t mangle -I OUTPUT 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n    iptables -t mangle -I FORWARD 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n    iptables -t mangle -I INPUT 1 -p $protocol --match multiport --dports {{ destinationPorts }} -j DROP;\n  fi\n\n  if [[ ! -z \"{{ sourcePorts }}\" ]]\n  then\n    iptables -I OUTPUT 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n    iptables -I FORWARD 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n    iptables -I INPUT 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n    iptables -t mangle -I OUTPUT 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n    iptables -t mangle -I FORWARD 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n    iptables -t mangle -I INPUT 1 -p $protocol --match multiport --sports {{ sourcePorts }} -j DROP;\n  fi\n  done\n\niptables -S\n\necho \"Before sleep...\"\nsleep {{ duration }}s;\necho \"After sleep...\"\n\necho \"Before restoring iptables rules...\"\niptables-restore<outputfile;\necho \"After restoring iptables rules...\"\n\niptables -S\n\nEOF\n"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-BlackHoleByPort"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-ShutDownNetworkInterfaceOnInstance": {
            "id": "eb-test-ShutDownNetworkInterfaceOnInstance",
            "path": "ExperimentBrokerStack/eb-test-ShutDownNetworkInterfaceOnInstance",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "Block all network traffic on an instance by shutting down the network interface",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "The amount of time for which the network interface should remain down. (Required)",
                      "default": "1",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependency via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.\n",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which ifconfig 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install net-tools\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive sudo apt-get install -y net-tools\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "name": "ShutdownNetworkInterface",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "sudo /sbin/ifconfig eth0 down\n"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-ShutDownNetworkInterfaceOnInstance"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-PodStressIO": {
            "id": "eb-test-PodStressIO",
            "path": "ExperimentBrokerStack/eb-test-PodStressIO",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "Perfomrs an IO stress test on one or 2 Core DNS Containers\n on an instance via utilizing the stress-ng tool.\n## Input Parameters\n* Duration: (Required) The duration - in seconds - of the IO stress.\n* Iomix: Specify the number of mixed IO stressors to use (default 1)\n* Percent: Specify the percentage of the available file system space used by each stressor. (default 80)\n* InstallDependencies: If set to True, Systems Manager installs the required dependencies on the target instances. (default True)\n",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "The amount of time which for memory will be stressed in seconds. (Required)",
                      "default": "60"
                    },
                    "iomix": {
                      "type": "String",
                      "description": "Specify the number of mixed IO stressors to use (default 1)",
                      "default": "1",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "percent": {
                      "type": "String",
                      "description": "Specify the percentage of the available file system space used by each stressor. (default 80)",
                      "default": "80",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "containerNamePattern": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z_]{1,128}$",
                      "default": "k8s_coredns"
                    },
                    "numContainersToTarget": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z]{1,128}$",
                      "default": "1"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.  In this case iptables is being installed and an attempt is\nmade to start the service.  iptables should always be installed on the os by default, so this should never happen.\n",
                      "inputs": {
                        "runCommand": [
                          "",
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which stress-ng 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install stress-ng\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive sudo apt-get install -y stress-ng\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "StressIO",
                      "description": "## Parameters: duration and cpu\nThis step will stress the specified CPU number - or all CPUs if set to 0 (zero) - for the specified duration time\nin seconds.\n",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "sudo -s -H <<'EOF'\n\nif [ {{ duration }} -lt 1 ] || [ {{ duration }} -gt 43200 ] ; then echo Duration parameter value must be between 1 and 43200 seconds && exit; fi\n\necho {{ containerNamePattern }}\n\nfirstCoreDNSPid=$(docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}' | awk '/{{ containerNamePattern }}/{print $1}' | awk 'NR==1{print $1}' | sed 's/,//')\necho \"${firstCoreDNSPid}\"\nsecondCoreDNSPid=$(docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}' | awk '/{{ containerNamePattern }}/{print $1}' | awk 'NR==2{print $1}' | sed 's/,//')\necho \"${secondCoreDNSPid}\"\n\nif [ -z \"$firstCoreDNSPid\" ]\nthen\n  echo \"firstCoreDNSPid is NULL\"\n  exit 0\nfi\n\nnsenter -t ${firstCoreDNSPid} -n sudo pgrep stress-ng && echo Another stress-ng command is running, exiting... && exit\n\necho Initiating IO stress for {{ duration }} seconds...\nnsenter -t ${firstCoreDNSPid} -n sudo stress-ng --iomix {{ iomix }} --iomix-bytes {{ percent }}% -t {{ duration }}s \necho Finished IO stress.\n\nif  [[ \"{{ numContainersToTarget}}\" == '2' ]] ; then\n  echo \"Two containers are being targeted on this test...\"\n\n  nsenter -t ${secondCoreDNSPid} -n sudo pgrep stress-ng && echo Another stress-ng command is running, exiting... && exit\n\n  echo Initiating IO stress for {{ duration }} seconds...\n  nsenter -t ${firstCoreDNSPid} -n sudo stress-ng --iomix {{ iomix }} --iomix-bytes {{ percent }}% -t {{ duration }}s \n  echo Finished IO stress.\nfi\n\nEOF"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-PodStressIO"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-PodStressMemory": {
            "id": "eb-test-PodStressMemory",
            "path": "ExperimentBrokerStack/eb-test-PodStressMemory",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "Perfomrs a high memory stress test on one or 2 Core DNS Containers\n on an instance via utilizing the stress-ng tool.\n## Input Parameters\n* Duration: The duration - in seconds - of the memory stress (default: 60).\n* Workers: The number of virtual memory stressors (default: 1).\n* Percent: The percentage of virtual memory to use (default: 80).\n* InstallDependencies: If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).\n",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "The amount of time which for memory will be stressed in seconds. (Required)",
                      "default": "60",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "workers": {
                      "type": "String",
                      "description": "The number of virtual memory stressors (default: 1).",
                      "default": "1",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "percent": {
                      "type": "String",
                      "description": "The percentage of virtual memory to use (required).",
                      "allowedPattern": "^[0-9]+$",
                      "default": "80"
                    },
                    "containerNamePattern": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z_]{1,128}$",
                      "default": "k8s_coredns"
                    },
                    "numContainersToTarget": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z]{1,128}$",
                      "default": "1"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.  In this case iptables is being installed and an attempt is\nmade to start the service.  iptables should always be installed on the os by default, so this should never happen.\n",
                      "inputs": {
                        "runCommand": [
                          "",
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which stress-ng 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install stress-ng\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive sudo apt-get install -y stress-ng\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "name": "AlterIPtables",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 180,
                        "runCommand": [
                          "sudo -s -H <<'EOF'\n\nif [ {{ duration }} -lt 1 ] || [ {{ duration }} -gt 43200 ] ; then echo Duration parameter value must be between 1 and 43200 seconds && exit; fi\n\necho {{ containerNamePattern }}\n\nfirstCoreDNSPid=$(docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}' | awk '/{{ containerNamePattern }}/{print $1}' | awk 'NR==1{print $1}' | sed 's/,//')\necho \"${firstCoreDNSPid}\"\nsecondCoreDNSPid=$(docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}' | awk '/{{ containerNamePattern }}/{print $1}' | awk 'NR==2{print $1}' | sed 's/,//')\necho \"${secondCoreDNSPid}\"\n\nif [ -z \"$firstCoreDNSPid\" ]\nthen\n  echo \"firstCoreDNSPid is NULL\"\n  exit 0\nfi\n\nnsenter -t ${firstCoreDNSPid} -n sudo pgrep stress-ng && echo Another stress-ng command is running, exiting... && exit\n\nnsenter -t ${firstCoreDNSPid} -n sudo stress-ng --vm {{ workers }} --vm-bytes {{ percent }}% -t {{ duration }}s\necho Finished memory stress.\n\nif  [[ \"{{ numContainersToTarget}}\" == '2' ]] ; then\n  echo \"Two containers are being targeted on this test...\"\n\n  nsenter -t ${secondCoreDNSPid} -n sudo pgrep stress-ng && echo Another stress-ng command is running, exiting... && exit\n\n  nsenter -t ${secondCoreDNSPid} -n sudo stress-ng --vm {{ workers }} --vm-bytes {{ percent }}% -t {{ duration }}s\n  echo Finished memory stress.\nfi\n\nEOF"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-PodStressMemory"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-PodStressNetworkUtilization": {
            "id": "eb-test-PodStressNetworkUtilization",
            "path": "ExperimentBrokerStack/eb-test-PodStressNetworkUtilization",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "## What does this document do?\nIt simulates high network utilization by limiting bandwidth on the network\non one or 2 Core DNS Containers\n on an instance via utilizing the stress-ng tool.\n## Input Parameters\n* Interface: The interface to add delay to (default: eth0).\n* Rate: The outgoing rate - in kbits - to set to the interface (default: 1024).\n* Duration: The duration - in seconds - of the test (default: 60).\n* Port Number:\n* Port Type: Source port or destination port.\n* InstallDependencies: If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).\n",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "interface": {
                      "type": "String",
                      "description": "The interface to add delay to (default: eth0).",
                      "default": "eth0",
                      "allowedPattern": "^[0-9a-zA-Z\\-]{1,15}$"
                    },
                    "iomix": {
                      "type": "String",
                      "description": "Specify the number of mixed IO stressors to use (default 1)",
                      "default": "1",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "portNumber": {
                      "type": "String",
                      "description": "The port number on which to limit the bandwidth. (default:80).\nThe allowed values are:\n* PortNumber: The Port No on which the network bandwidth is to be limited.\n",
                      "default": "0",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "portType": {
                      "type": "String",
                      "description": "The port type on which to limit the bandwith. (default:sport).\nThe allowed values are: dport, sport.\n",
                      "default": "sport",
                      "allowedValues": [
                        "dport",
                        "sport"
                      ]
                    },
                    "rate": {
                      "type": "String",
                      "description": "The outgoing rate - in kbits - to add to set the interface (default: 1024).",
                      "default": "1024",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "duration": {
                      "type": "String",
                      "description": "The duration - in seconds - of the test (default: 60).",
                      "default": "60",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    },
                    "containerNamePattern": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z_]{1,128}$",
                      "default": "k8s_coredns"
                    },
                    "percent": {
                      "type": "String",
                      "description": "Specify the percentage of the available bandwidth used by each stressor. (default 80)",
                      "default": "80",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "numContainersToTarget": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z]{1,128}$",
                      "default": "1"
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.\n",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which tc 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install tc\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive sudo apt-get install -y iproute2\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "AlterNetworkInterface",
                      "description": "## Parameters: interface, delay and duration\nThis step changes the outgoing rate (in kbits) to `Interface` for the given `Duration` (in seconds),\nusing the `tc` (Traffic Control) command.  The script will limit the outgoing bandwidth on the network,\nand wait for the given duration to remove that.\n",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "sudo -s -H <<'EOF'\n\nif [ {{ duration }} -lt 1 ] || [ {{ duration }} -gt 43200 ] ; then echo Duration parameter value must be between 1 and 43200 seconds && exit; fi\n\necho {{ containerNamePattern }}\n\nfirstCoreDNSPid=$(docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}' | awk '/{{ containerNamePattern }}/{print $1}' | awk 'NR==1{print $1}' | sed 's/,//')\necho \"${firstCoreDNSPid}\"\nsecondCoreDNSPid=$(docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}' | awk '/{{ containerNamePattern }}/{print $1}' | awk 'NR==2{print $1}' | sed 's/,//')\necho \"${secondCoreDNSPid}\"\n\nif [ -z \"$firstCoreDNSPid\" ]\nthen\n  echo \"firstCoreDNSPid is NULL\"\n  exit 0\nfi\n\necho \"Injecting high network utilization ...\"\nnsenter -t ${firstCoreDNSPid} -n sudo stress-ng --iomix {{ iomix }} --iomix-bytes {{ percent }}% -t {{ duration }}s \nnsenter -t ${firstCoreDNSPid} -n sudo tc qdisc add dev {{ interface }} root tbf rate {{ rate }}kbit latency 50ms burst 1540\nnsenter -t ${firstCoreDNSPid} -n sudo sleep {{ duration }}s\nnsenter -t ${firstCoreDNSPid} -n sudo tc qdisc del dev {{ interface }} root\necho \"Finished injecting high network utilization ...\"\n\nif  [[ \"{{ numContainersToTarget}}\" == '2' ]] ; then\n  echo \"Two containers are being targeted on this test...\"\n\n  echo \"Injecting high network utilization ...\"\n  nsenter -t ${firstCoreDNSPid} -n sudo stress-ng --iomix {{ iomix }} --iomix-bytes {{ percent }}% -t {{ duration }}s \n  nsenter -t ${firstCoreDNSPid} -n sudo tc qdisc add dev {{ interface }} root tbf rate {{ rate }}kbit latency 50ms burst 1540\n  nsenter -t ${firstCoreDNSPid} -n sudo sleep {{ duration }}s\n  nsenter -t ${firstCoreDNSPid} -n sudo tc qdisc del dev {{ interface }} root\n  echo \"Finished injecting high network utilization ...\"\nfi\n\nEOF"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-PodStressNetworkUtilization"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-StressCPU": {
            "id": "eb-test-StressCPU",
            "path": "ExperimentBrokerStack/eb-test-StressCPU",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "## What does this document do?\nIt runs CPU stress on an instance via stress-ng tool.\n## Input Parameters\n* duration: (Required) The duration - in seconds - of the CPU stress.\n* cpu: Specify the number of CPU stressors to use (default 0 = all)\n* installDependencies: If set to True, Systems Manager installs the required dependencies on the target instances. (default True)\n",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "(Required) The duration - in seconds - of the CPU stress.",
                      "allowedPattern": "^[0-9]+$",
                      "default": "60"
                    },
                    "cpu": {
                      "type": "String",
                      "description": "Specify the number of CPU stressors to use (default: 0 which means \"all CPUs\")",
                      "default": "0",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances (default: True)",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependency via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.\n",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which stress-ng 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install stress-ng\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive sudo apt-get install -y stress-ng\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "ExecuteStressNg",
                      "description": "## Parameters: duration and cpu\nThis step will stress the specified CPU number - or all CPUs if set to 0 (zero) - for the specified duration time\nin seconds.\n",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "if [ {{ duration }} -lt 1 ] || [ {{ duration }} -gt 43200 ] ; then echo duration parameter value must be between 1 and 43200 seconds && exit; fi\nsudo pgrep stress-ng && echo Another stress-ng command is running, exiting... && exit\necho Initiating CPU stress for {{ duration }} seconds...\nsudo stress-ng --cpu {{ cpu }} --cpu-method matrixprod -t {{ duration }}s\necho Finished CPU stress.\n"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-StressCPU"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-StressNetworkLatency": {
            "id": "eb-test-StressNetworkLatency",
            "path": "ExperimentBrokerStack/eb-test-StressNetworkLatency",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "## What does this document do?\nIt adds latency on the network.\n## Input Parameters\n* Interface: The interface to add delay to (default: eth0).\n* Delay: The delay - in milliseconds - to add to the interface (default: 200).\n* Duration: The duration - in seconds - of the test (default: 60).\n* InstallDependencies: If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).\n",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "interface": {
                      "type": "String",
                      "description": "The interface to add delay to (default: eth0).",
                      "default": "eth0"
                    },
                    "ports": {
                      "type": "String",
                      "description": "The port numbers separated by a space on which to induce the network latency.",
                      "default": "0",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "portType": {
                      "type": "String",
                      "description": "The port type on which to induce the network latency. (default:sport).\nThe allowed values are: dport, sport.\n",
                      "default": "sport"
                    },
                    "delay": {
                      "type": "String",
                      "description": "The delay - in milliseconds - to add to the interface (default: 100).",
                      "default": "100"
                    },
                    "duration": {
                      "type": "String",
                      "description": "The duration - in seconds - of the test (default: 60).",
                      "default": "60"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True"
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.\n",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which tc 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install tc\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive sudo apt-get install -y iproute2\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "AlterNetworkInterface",
                      "description": "## Parameters: interface, delay and duration\nThis step adds a `Delay` (in milliseconds) to `Interface` for the given `Duration` (in seconds), using the `tc` (Traffic Control) command.\nThe script will inject latency on the network, and wait for the given duration to remove that.\n",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "sudo -s -H <<'EOF'\n\necho \"interface\" = {{ interface }}\necho \"delay\" = {{ delay }}\necho \"portType\" = {{ portType }}\necho \"ports\" = {{ ports }}\necho \"duration\" = {{ duration }}\n\necho \"Injecting latency...\"\nif  [[ \"{{ ports }}\" == 0 ]] ; then\n  sudo tc qdisc add dev {{ interface }} root netem delay {{ delay }}ms\n  echo \"Before sleep...\"\n  sleep {{ duration }}s\n  echo \"After sleep...\"\n  echo \"Before removing network latency...\"\n  sudo tc qdisc del dev {{ interface }} root\n  echo \"After removing network latency...\"\nelse\n  for port in {{ ports }}; do\n    tc qdisc add dev {{ interface }} root handle 1: prio priomap 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n    tc qdisc add dev {{ interface }} parent 1:2 handle 20: netem delay '{{ delay }}ms'\n    tc filter add dev {{ interface }} parent 1:0 protocol ip u32 match ip '{{portType}}' $port 0xffff flowid 1:2\n    done\n\n  echo \"Before sleep...\"\n  sleep {{ duration }}s\n  echo \"After sleep...\"\n  tc qdisc del dev {{ interface }} root\n  echo \"Before removing network latency...\"\n  tc qdisc del dev {{ interface }} root\n  echo \"After removing network latency...\"\nfi\nEOF"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-StressNetworkLatency"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-StressPacketLoss": {
            "id": "eb-test-StressPacketLoss",
            "path": "ExperimentBrokerStack/eb-test-StressPacketLoss",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "## What does this document do?\nAdding packet loss to the network\nDrops 7% of packets with 25% correlation\n## Input Parameters\n* Interface: The interface to add delay to (default: eth0).\n* Loss: The percent of packet to drop (default: 7).\n* Correlation: The correlation - in percent - with previous packet loss (default: 25).\n* Duration: The duration - in seconds - of the test (default: 60).\n* InstallDependencies: If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).\n",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "interface": {
                      "type": "String",
                      "description": "The interface to add delay to (default: eth0).",
                      "default": "eth0"
                    },
                    "portNumber": {
                      "type": "String",
                      "description": "The port number on which to induce the network latency. (default:80).\nThe allowed values are:\n* PortNumber: The Port No on which the network latency is to be induced.\n",
                      "default": "0"
                    },
                    "portType": {
                      "type": "String",
                      "description": "The port type on which to induce the network latency. (default:sport).\nThe allowed values are: dport, sport.\n",
                      "default": "sport"
                    },
                    "loss": {
                      "type": "String",
                      "description": "The percent of packet to drop. (default: 7).",
                      "default": "7"
                    },
                    "duration": {
                      "type": "String",
                      "description": "The duration - in seconds - of the test (default: 60).",
                      "default": "60"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True"
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: installDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.\n",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which tc 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install tc\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive sudo apt-get install -y iproute2\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "AlterNetworkInterface",
                      "description": "## Parameters: interface, loss, and duration\nThis step adds a `Loss` (in percent) to `interface` for the given `duration` (in seconds), using the `tc` (Traffic Control) command.\nThe script will inject packet drop on the network, and wait for the given duration to remove that.\n",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "#!/bin/bash\necho \"Injecting packet drop...\"\nif  [[ \"{{ portNumber }}\" == 0 ]] ; then\n  sudo tc qdisc add dev {{ interface }} root netem loss {{ loss }}%\n  sudo sleep {{ duration }}s\n  sudo tc qdisc del dev {{ interface }} root netem loss {{ loss }}%\nelse  \n  sudo tc qdisc add dev {{ interface }} root handle 1: prio priomap 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n  sudo tc qdisc add dev {{ interface }} parent 1:2 handle 20: netem loss {{ loss }}%\n  sudo tc filter add dev {{ interface }} parent 1:0 protocol ip u32 match ip {{portType}} {{ portNumber }} 0xffff flowid 1:2\n  sudo sleep {{ duration }}s\n  sudo tc qdisc del dev {{ interface }} root\nfi\n"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-StressPacketLoss"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-KillProcess": {
            "id": "eb-test-KillProcess",
            "path": "ExperimentBrokerStack/eb-test-KillProcess",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "## What does this document do?\nIt kills a particular process by pid in an instance, using the `kill` command.\n## Input Parameters\n* Process: (Required) Pid of the process to kill.\n* Signal: The SIGNAL to be sent along with the kill command (default: SIGTERM). The allowed values are:\n  * SIGTERM: Signal used for gracefully terminate a process. Can be referred as soft kill, because the receiver may choose to ignore it.\n  * SIGKILL: Signal used for immediate termination of a process. Cannot be caught, ignored or blocked. Child processes are killed as well.\n",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "processId": {
                      "type": "String",
                      "description": "(Required) Pid of the process to kill, using the `kill` command. ",
                      "allowedPattern": "^[0-9]{1,128}$"
                    },
                    "signal": {
                      "type": "String",
                      "description": "The SIGNAL to be sent along with the kill command (default: SIGTERM).\nThe allowed values are:\n* SIGTERM: Signal used for graceful process termination. Can be referred as soft kill, because the receiver may choose to ignore it.\n* SIGKILL: Signal used for immediate process termination. Cannot be caught, ignored or blocked. Child processes are killed as well.\n",
                      "default": "SIGTERM",
                      "allowedValues": [
                        "SIGTERM",
                        "SIGKILL"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "KillProcess",
                      "description": "## Parameters: processId\nThis step will kill the specified process, using the `kill` command.\n",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "kill -{{ signal }} {{ processId }}"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-KillProcess"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-PodStressAllNetworkIO": {
            "id": "eb-test-PodStressAllNetworkIO",
            "path": "ExperimentBrokerStack/eb-test-PodStressAllNetworkIO",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "Block all ports on one or 2 Core DNS Containers",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "The amount of time which the port will be blocked for in minutes. (Required)",
                      "default": "2",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "containerNamePattern": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z_]{1,128}$",
                      "default": "k8s_coredns"
                    },
                    "numContainersToTarget": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z]{1,128}$",
                      "default": "1"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: InstallDependencies\nIf set to True, this step installs the required dependecy via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.  In this case iptables is being installed and an attempt is\nmade to start the service.  iptables should always be installed on the os by default, so this should never happen.\n",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which iptables 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install iptables-services\n      sudo systemctl start iptables\n      sudo systemctl start ip6tables\n      sudo systemctl enable iptables\n      sudo systemctl enable ip6tables\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y iptables\n    sudo ufw enable\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "name": "AlterIPtables",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 180,
                        "runCommand": [
                          "sudo -s -H <<'EOF'\n\necho {{ containerNamePattern }}\n\nfirstCoreDNSPid=$(docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}' | awk '/{{ containerNamePattern }}/{print $1}' | awk 'NR==1{print $1}' | sed 's/,//')\necho \"${firstCoreDNSPid}\"\nsecondCoreDNSPid=$(docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}' | awk '/{{ containerNamePattern }}/{print $1}' | awk 'NR==2{print $1}' | sed 's/,//')\necho \"${secondCoreDNSPid}\"\n\nif [ -z \"$firstCoreDNSPid\" ]\nthen\n  echo \"firstCoreDNSPid is NULL\"\n  exit 0\nfi\n\nnsenter -t ${firstCoreDNSPid} -n iptables-save>outputfile;\n\nnsenter -t ${firstCoreDNSPid} -n sudo iptables -I INPUT -m state --state NEW -j DROP\nnsenter -t ${firstCoreDNSPid} -n iptables -I OUTPUT -m state --state NEW -j DROP\nnsenter -t ${firstCoreDNSPid} -n iptables -I FORWARD -m state --state NEW -j DROP \n\nnsenter -t ${firstCoreDNSPid} -n iptables -S;\n\nif  [[ \"{{ numContainersToTarget}}\" == '2' ]] ; then\n  echo \"Two containers are being targeted on this test...\"\n\n  nsenter -t ${secondCoreDNSPid} -n iptables-save>outputfile;\n\n  nsenter -t ${secondCoreDNSPid} -n sudo iptables -I INPUT -m state --state NEW -j DROP\n  nsenter -t ${secondCoreDNSPid} -n iptables -I OUTPUT -m state --state NEW -j DROP\n  nsenter -t ${secondCoreDNSPid} -n iptables -I FORWARD -m state --state NEW -j DROP \n\n  nsenter -t ${secondCoreDNSPid} -n iptables -S;\nfi\n\necho \"Before sleep...\"\nnsenter -t ${firstCoreDNSPid} -n sleep {{ duration }}m;\nif  [[ \"{{ numContainersToTarget}}\" == '2' ]] ; then\n  nsenter -t ${secondCoreDNSPid} -n sleep {{ duration }}m;\nfi\necho \"After sleep...\"\n\necho \"Before restoring iptables rules...\"\nnsenter -t ${firstCoreDNSPid} -n iptables-restore<outputfile;\nif  [[ \"{{ numContainersToTarget}}\" == '2' ]] ; then\n  nsenter -t ${secondCoreDNSPid} -n iptables-restore<outputfile;\nfi\necho \"After restoring iptables rules...\"\n\necho \"Before deleting outputfile\"\nnsenter -t ${firstCoreDNSPid} -n rm outputfile;\nif  [[ \"{{ numContainersToTarget}}\" == '2' ]] ; then\n  nsenter -t ${secondCoreDNSPid} -n rm outputfile;\nfi\necho \"After deleting output file\"\n\nEOF"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-PodStressAllNetworkIO"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-PodTerminationCrash": {
            "id": "eb-test-PodTerminationCrash",
            "path": "ExperimentBrokerStack/eb-test-PodTerminationCrash",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "Crash 1 or both of the Containers matching the containerNamePattern parameter.",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "containerNamePattern": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9a-zA-Z_]{1,128}$",
                      "default": "k8s_coredns"
                    },
                    "numContainersToTarget": {
                      "type": "String",
                      "description": "",
                      "allowedPattern": "^[0-9]+$",
                      "default": "2"
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "name": "PodTerminationCrash",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 180,
                        "runCommand": [
                          "sudo -s -H <<'EOF'\n\necho {{ containerNamePattern }}\n\nfirstPID=$(docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}' | awk '/{{ containerNamePattern }}/{print $1}' | awk 'NR==1{print $1}' | sed 's/,//')\necho \"${firstPID}\"\nsecondPID=$(docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}' | awk '/{{ containerNamePattern }}/{print $1}' | awk 'NR==2{print $1}' | sed 's/,//')\necho \"${secondPID}\"\n\necho \"Crashing Core DNS...\"\nkill -9 \"${firstPID}\"\nif  [[ \"{{ numContainersToTarget}}\" == '2' ]] ; then\n  kill -9 \"${secondPID}\"\nfi\nEOF\n"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-PodTerminationCrash"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-StressMemory": {
            "id": "eb-test-StressMemory",
            "path": "ExperimentBrokerStack/eb-test-StressMemory",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "## What does this document do?\nIt runs memory stress on an instance via stress-ng tool.\n## Input Parameters\n* Duration: The duration - in seconds - of the memory stress (default: 60).\n* Workers: The number of virtual memory stressors (default: 1).\n* Percent: The percentage of virtual memory to use (default: 80).\n* InstallDependencies: If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).\n",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "The duration - in seconds - of the memory stress (default: 60).",
                      "default": "60",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "workers": {
                      "type": "String",
                      "description": "The number of virtual memory stressors (default: 1).",
                      "default": "1",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "percent": {
                      "type": "String",
                      "description": "The percentage of virtual memory to use (required).",
                      "allowedPattern": "^[0-9]+$",
                      "default": "80"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "installDependencies",
                      "description": "## Parameter: installDependencies\nIf set to True, this step installs the required dependency via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.\n",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which stress-ng 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install stress-ng\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive sudo apt-get install -y stress-ng\n  elif sudo cat /etc/os-release | grep -i debian; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive sudo apt-get install -y stress-ng\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "ExecuteStressNg",
                      "description": "## Parameters: duration, workers and percent\nThis step will run a memory stress test on the instance for the specified Duration time - in seconds.\nIt will start `Workers` number of workers, using `Percent` of the total available memory.\n",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "if [ {{ duration }} -lt 1 ] || [ {{ duration }} -gt 43200 ] ; then echo Duration parameter value must be between 1 and 43200 seconds && exit; fi\nsudo pgrep stress-ng && echo Another stress-ng command is running, exiting... && exit\necho Initiating memory stress for {{ duration }} seconds, {{ workers }} workers, using {{ percent }} of total available memory...\nsudo stress-ng --vm {{ workers }} --vm-bytes {{ percent }}% -t {{ duration }}s\necho Finished memory stress.\n"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-StressMemory"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-StressIO": {
            "id": "eb-test-StressIO",
            "path": "ExperimentBrokerStack/eb-test-StressIO",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::SSM::Document",
              "aws:cdk:cloudformation:props": {
                "content": {
                  "description": "## What does this document do?\nIt runs IO stress on an instance via stress-ng tool.\n## Input Parameters\n* Duration: (Required) The duration - in seconds - of the IO stress.\n* Iomix: Specify the number of mixed IO stressors to use (default 1)\n* Percent: Specify the percentage of the available file system space used by each stressor. (default 80)\n* InstallDependencies: If set to True, Systems Manager installs the required dependencies on the target instances. (default True)\n",
                  "schemaVersion": "2.2",
                  "parameters": {
                    "duration": {
                      "type": "String",
                      "description": "(Required) The duration - in seconds - of the IO stress.",
                      "allowedPattern": "^[0-9]+$",
                      "default": "60"
                    },
                    "iomix": {
                      "type": "String",
                      "description": "Specify the number of mixed IO stressors to use (default 1)",
                      "default": "1",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "percent": {
                      "type": "String",
                      "description": "Specify the percentage of the available file system space used by each stressor. (default 80)",
                      "default": "80",
                      "allowedPattern": "^[0-9]+$"
                    },
                    "installDependencies": {
                      "type": "String",
                      "description": "If set to True, Systems Manager installs the required dependencies on the target instances (default: True)",
                      "default": "True",
                      "allowedValues": [
                        "True",
                        "False"
                      ]
                    }
                  },
                  "mainSteps": [
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "InstallDependencies",
                      "description": "## Parameter: installDependencies\nIf set to True, this step installs the required dependency via operating system's repository. It supports both\nDebian (apt) and CentOS (yum) based package managers.\n",
                      "inputs": {
                        "runCommand": [
                          "#!/bin/bash\nif  [[ \"{{ installDependencies }}\" == True ]] ; then\n  if [[ \"$( which stress-ng 2>/dev/null )\" ]] ; then echo Dependency is already installed. ; exit ; fi\n  echo \"Installing required dependencies\"\n  if [ -f  \"/etc/system-release\" ] ; then\n    if sudo cat /etc/system-release | grep -i 'Amazon Linux' ; then\n      sudo amazon-linux-extras install testing\n      sudo yum -y install stress-ng\n    else\n      echo \"There was a problem installing dependencies.\"\n      exit 1\n    fi\n  elif sudo cat /etc/issue | grep -i Ubuntu ; then\n    sudo apt-get update -y\n    sudo DEBIAN_FRONTEND=noninteractive sudo apt-get install -y stress-ng\n  else\n    echo \"There was a problem installing dependencies.\"\n    exit 1\n  fi\nfi\n"
                        ]
                      }
                    },
                    {
                      "action": "aws:runShellScript",
                      "precondition": {
                        "StringEquals": [
                          "platformType",
                          "Linux"
                        ]
                      },
                      "name": "ExecuteStressNg",
                      "description": "## Parameters: duration, iomix, and rrercent\nThis step will perform an IO stress for the specified Duration time\nin seconds.\n",
                      "inputs": {
                        "maxAttempts": 1,
                        "timeoutSeconds": 120,
                        "runCommand": [
                          "if [ {{ duration }} -lt 1 ] || [ {{ duration }} -gt 43200 ] ; then echo Duration parameter value must be between 1 and 43200 seconds && exit; fi\nsudo pgrep stress-ng && echo Another stress-ng command is running, exiting... && exit\necho Initiating IO stress for {{ duration }} seconds...\nsudo stress-ng --iomix {{ iomix }} --iomix-bytes {{ percent }}% -t {{ duration }}s\necho Finished IO stress.\n"
                        ]
                      }
                    }
                  ]
                },
                "documentFormat": "YAML",
                "documentType": "Command",
                "name": "eb-test-StressIO"
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.CfnDocument",
              "version": "2.122.0"
            }
          },
          "eb-test-trigger": {
            "id": "eb-test-trigger",
            "path": "ExperimentBrokerStack/eb-test-trigger",
            "children": {
              "Code": {
                "id": "Code",
                "path": "ExperimentBrokerStack/eb-test-trigger/Code",
                "children": {
                  "Stage": {
                    "id": "Stage",
                    "path": "ExperimentBrokerStack/eb-test-trigger/Code/Stage",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.AssetStaging",
                      "version": "2.122.0"
                    }
                  },
                  "AssetBucket": {
                    "id": "AssetBucket",
                    "path": "ExperimentBrokerStack/eb-test-trigger/Code/AssetBucket",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_s3.BucketBase",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_s3_assets.Asset",
                  "version": "2.122.0"
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "ExperimentBrokerStack/eb-test-trigger/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                  "aws:cdk:cloudformation:props": {
                    "code": {
                      "s3Bucket": {
                        "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
                      },
                      "s3Key": "7181f8c64946704f5ae968025e14581374dd55080e5743740cca9cc5bedff2eb.zip"
                    },
                    "environment": {
                      "variables": {
                        "STATE_MACHINE_ARN": {
                          "Ref": "ebtestStateMachine249346BD"
                        },
                        "BUCKET_NAME": {
                          "Ref": "ebtestsourcebucketB1DEEE4A"
                        },
                        "EXPERIMENT_PREFIX": "experiments/",
                        "RESULT_PREFIX": "journals/"
                      }
                    },
                    "functionName": "eb-test-trigger",
                    "handler": "index.lambda_handler",
                    "role": {
                      "Fn::GetAtt": [
                        "ebtestlambdaroleDE103BD1",
                        "Arn"
                      ]
                    },
                    "runtime": "python3.12",
                    "timeout": 120
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_lambda.CfnFunction",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_lambda.Function",
              "version": "2.122.0"
            }
          },
          "eb-test-jira-writer": {
            "id": "eb-test-jira-writer",
            "path": "ExperimentBrokerStack/eb-test-jira-writer",
            "children": {
              "Code": {
                "id": "Code",
                "path": "ExperimentBrokerStack/eb-test-jira-writer/Code",
                "children": {
                  "Stage": {
                    "id": "Stage",
                    "path": "ExperimentBrokerStack/eb-test-jira-writer/Code/Stage",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.AssetStaging",
                      "version": "2.122.0"
                    }
                  },
                  "AssetBucket": {
                    "id": "AssetBucket",
                    "path": "ExperimentBrokerStack/eb-test-jira-writer/Code/AssetBucket",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_s3.BucketBase",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_s3_assets.Asset",
                  "version": "2.122.0"
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "ExperimentBrokerStack/eb-test-jira-writer/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                  "aws:cdk:cloudformation:props": {
                    "code": {
                      "s3Bucket": {
                        "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
                      },
                      "s3Key": "765cd1c439a9ac58b1e2c87d0fae2dc66b12ac4ec0e3d5c78f7b4ffa799caf26.zip"
                    },
                    "environment": {
                      "variables": {
                        "secret_id": "exp-broker-jira-auth"
                      }
                    },
                    "functionName": "eb-test-jira-writer",
                    "handler": "journal_writer.handler",
                    "role": {
                      "Fn::GetAtt": [
                        "ebtestlambdaroleDE103BD1",
                        "Arn"
                      ]
                    },
                    "runtime": "python3.10",
                    "timeout": 60
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_lambda.CfnFunction",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_lambda.Function",
              "version": "2.122.0"
            }
          },
          "xray-integration-policy": {
            "id": "xray-integration-policy",
            "path": "ExperimentBrokerStack/xray-integration-policy",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ExperimentBrokerStack/xray-integration-policy/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                  "aws:cdk:cloudformation:props": {
                    "policyDocument": {
                      "Statement": [
                        {
                          "Action": "secretsmanager:GetSecretValue",
                          "Effect": "Allow",
                          "Resource": "arn:aws:secretsmanager:*:*:secret:exp-broker-jira-auth*"
                        },
                        {
                          "Action": "s3:GetObject",
                          "Effect": "Allow",
                          "Resource": {
                            "Fn::Join": [
                              "",
                              [
                                {
                                  "Fn::GetAtt": [
                                    "ebtestsourcebucketB1DEEE4A",
                                    "Arn"
                                  ]
                                },
                                "/journals/*"
                              ]
                            ]
                          }
                        },
                        {
                          "Action": [
                            "kms:Decrypt",
                            "kms:Encrypt",
                            "kms:GenerateDataKey"
                          ],
                          "Effect": "Allow",
                          "Resource": {
                            "Fn::GetAtt": [
                              "ebtestkeyFA6456B8",
                              "Arn"
                            ]
                          }
                        }
                      ],
                      "Version": "2012-10-17"
                    },
                    "policyName": "xrayintegrationpolicyF46033FB",
                    "roles": [
                      {
                        "Ref": "ebtestlambdaroleDE103BD1"
                      }
                    ]
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.CfnPolicy",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_iam.Policy",
              "version": "2.122.0"
            }
          },
          "BucketNotificationsHandler050a0587b7544547bf325f094a3db834": {
            "id": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834",
            "path": "ExperimentBrokerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834",
            "children": {
              "Role": {
                "id": "Role",
                "path": "ExperimentBrokerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role",
                "children": {
                  "ImportRole": {
                    "id": "ImportRole",
                    "path": "ExperimentBrokerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/ImportRole",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.Resource",
                      "version": "2.122.0"
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "ExperimentBrokerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "lambda.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "managedPolicyArns": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                              ]
                            ]
                          }
                        ]
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                      "version": "2.122.0"
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "ExperimentBrokerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "ExperimentBrokerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": "s3:PutBucketNotification",
                                  "Effect": "Allow",
                                  "Resource": "*"
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
                            "roles": [
                              {
                                "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
                              }
                            ]
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_iam.CfnPolicy",
                          "version": "2.122.0"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.Policy",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.Role",
                  "version": "2.122.0"
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "ExperimentBrokerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnResource",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "constructs.Construct",
              "version": "10.3.0"
            }
          },
          "CDKMetadata": {
            "id": "CDKMetadata",
            "path": "ExperimentBrokerStack/CDKMetadata",
            "children": {
              "Default": {
                "id": "Default",
                "path": "ExperimentBrokerStack/CDKMetadata/Default",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnResource",
                  "version": "2.122.0"
                }
              },
              "Condition": {
                "id": "Condition",
                "path": "ExperimentBrokerStack/CDKMetadata/Condition",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnCondition",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "constructs.Construct",
              "version": "10.3.0"
            }
          },
          "BootstrapVersion": {
            "id": "BootstrapVersion",
            "path": "ExperimentBrokerStack/BootstrapVersion",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnParameter",
              "version": "2.122.0"
            }
          },
          "CheckBootstrapVersion": {
            "id": "CheckBootstrapVersion",
            "path": "ExperimentBrokerStack/CheckBootstrapVersion",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnRule",
              "version": "2.122.0"
            }
          }
        },
        "constructInfo": {
          "fqn": "aws-cdk-lib.Stack",
          "version": "2.122.0"
        }
      },
      "ActionsProbeTesting": {
        "id": "ActionsProbeTesting",
        "path": "ActionsProbeTesting",
        "children": {
          "TestBucket": {
            "id": "TestBucket",
            "path": "ActionsProbeTesting/TestBucket",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ActionsProbeTesting/TestBucket/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::S3::Bucket",
                  "aws:cdk:cloudformation:props": {
                    "bucketName": "ebap-test"
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_s3.CfnBucket",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_s3.Bucket",
              "version": "2.122.0"
            }
          },
          "BeginBucket": {
            "id": "BeginBucket",
            "path": "ActionsProbeTesting/BeginBucket",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ActionsProbeTesting/BeginBucket/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::S3::Bucket",
                  "aws:cdk:cloudformation:props": {
                    "bucketName": "ebap-begin"
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_s3.CfnBucket",
                  "version": "2.122.0"
                }
              },
              "Notifications": {
                "id": "Notifications",
                "path": "ActionsProbeTesting/BeginBucket/Notifications",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "ActionsProbeTesting/BeginBucket/Notifications/Resource",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.CfnResource",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "constructs.Construct",
                  "version": "10.3.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_s3.Bucket",
              "version": "2.122.0"
            }
          },
          "BucketNotificationsHandler050a0587b7544547bf325f094a3db834": {
            "id": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834",
            "path": "ActionsProbeTesting/BucketNotificationsHandler050a0587b7544547bf325f094a3db834",
            "children": {
              "Role": {
                "id": "Role",
                "path": "ActionsProbeTesting/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role",
                "children": {
                  "ImportRole": {
                    "id": "ImportRole",
                    "path": "ActionsProbeTesting/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/ImportRole",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.Resource",
                      "version": "2.122.0"
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "ActionsProbeTesting/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "lambda.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "managedPolicyArns": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                              ]
                            ]
                          }
                        ]
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                      "version": "2.122.0"
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "ActionsProbeTesting/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "ActionsProbeTesting/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": "s3:PutBucketNotification",
                                  "Effect": "Allow",
                                  "Resource": "*"
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
                            "roles": [
                              {
                                "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
                              }
                            ]
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_iam.CfnPolicy",
                          "version": "2.122.0"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.Policy",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.Role",
                  "version": "2.122.0"
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "ActionsProbeTesting/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnResource",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "constructs.Construct",
              "version": "10.3.0"
            }
          },
          "EBTestingStateMachine": {
            "id": "EBTestingStateMachine",
            "path": "ActionsProbeTesting/EBTestingStateMachine",
            "children": {
              "ImportEBTestingStateMachine": {
                "id": "ImportEBTestingStateMachine",
                "path": "ActionsProbeTesting/EBTestingStateMachine/ImportEBTestingStateMachine",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.Resource",
                  "version": "2.122.0"
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "ActionsProbeTesting/EBTestingStateMachine/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                  "aws:cdk:cloudformation:props": {
                    "assumeRolePolicyDocument": {
                      "Statement": [
                        {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": {
                            "Service": "states.amazonaws.com"
                          }
                        }
                      ],
                      "Version": "2012-10-17"
                    },
                    "managedPolicyArns": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":iam::aws:policy/service-role/AWSLambdaRole"
                          ]
                        ]
                      }
                    ]
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                  "version": "2.122.0"
                }
              },
              "DefaultPolicy": {
                "id": "DefaultPolicy",
                "path": "ActionsProbeTesting/EBTestingStateMachine/DefaultPolicy",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "ActionsProbeTesting/EBTestingStateMachine/DefaultPolicy/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                      "aws:cdk:cloudformation:props": {
                        "policyDocument": {
                          "Statement": [
                            {
                              "Action": "lambda:InvokeFunction",
                              "Effect": "Allow",
                              "Resource": [
                                {
                                  "Fn::GetAtt": [
                                    "WaitSFNTestLambda2CF9762A",
                                    "Arn"
                                  ]
                                },
                                {
                                  "Fn::Join": [
                                    "",
                                    [
                                      {
                                        "Fn::GetAtt": [
                                          "WaitSFNTestLambda2CF9762A",
                                          "Arn"
                                        ]
                                      },
                                      ":*"
                                    ]
                                  ]
                                }
                              ]
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "policyName": "EBTestingStateMachineDefaultPolicyDC7E7FFD",
                        "roles": [
                          {
                            "Ref": "EBTestingStateMachineC23DE3E5"
                          }
                        ]
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.CfnPolicy",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.Policy",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_iam.Role",
              "version": "2.122.0"
            }
          },
          "Wait": {
            "id": "Wait",
            "path": "ActionsProbeTesting/Wait",
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_stepfunctions.Wait",
              "version": "2.122.0"
            }
          },
          "WaitMachine": {
            "id": "WaitMachine",
            "path": "ActionsProbeTesting/WaitMachine",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ActionsProbeTesting/WaitMachine/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::StepFunctions::StateMachine",
                  "aws:cdk:cloudformation:props": {
                    "definitionString": "{\"StartAt\":\"Wait\",\"States\":{\"Wait\":{\"Type\":\"Wait\",\"Seconds\":60,\"End\":true}}}",
                    "roleArn": {
                      "Fn::GetAtt": [
                        "EBTestingStateMachineC23DE3E5",
                        "Arn"
                      ]
                    },
                    "tags": [
                      {
                        "key": "Type",
                        "value": "RegressionTesting"
                      }
                    ]
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_stepfunctions.CfnStateMachine",
                  "version": "2.122.0"
                }
              },
              "EventsRole": {
                "id": "EventsRole",
                "path": "ActionsProbeTesting/WaitMachine/EventsRole",
                "children": {
                  "ImportEventsRole": {
                    "id": "ImportEventsRole",
                    "path": "ActionsProbeTesting/WaitMachine/EventsRole/ImportEventsRole",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.Resource",
                      "version": "2.122.0"
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "ActionsProbeTesting/WaitMachine/EventsRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "events.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "tags": [
                          {
                            "key": "Type",
                            "value": "RegressionTesting"
                          }
                        ]
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                      "version": "2.122.0"
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "ActionsProbeTesting/WaitMachine/EventsRole/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "ActionsProbeTesting/WaitMachine/EventsRole/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": "states:StartExecution",
                                  "Effect": "Allow",
                                  "Resource": {
                                    "Ref": "WaitMachine495FAF14"
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "WaitMachineEventsRoleDefaultPolicy9AF12A78",
                            "roles": [
                              {
                                "Ref": "WaitMachineEventsRole4FB2E136"
                              }
                            ]
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_iam.CfnPolicy",
                          "version": "2.122.0"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.Policy",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.Role",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_stepfunctions.StateMachine",
              "version": "2.122.0"
            }
          },
          "WaitMachineArnParameter": {
            "id": "WaitMachineArnParameter",
            "path": "ActionsProbeTesting/WaitMachineArnParameter",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ActionsProbeTesting/WaitMachineArnParameter/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "name": "/RegressionTesting/StateMachineArns/Wait",
                    "type": "String",
                    "value": {
                      "Ref": "WaitMachine495FAF14"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ssm.CfnParameter",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.StringParameter",
              "version": "2.122.0"
            }
          },
          "WaitSFNTestLambda": {
            "id": "WaitSFNTestLambda",
            "path": "ActionsProbeTesting/WaitSFNTestLambda",
            "children": {
              "ServiceRole": {
                "id": "ServiceRole",
                "path": "ActionsProbeTesting/WaitSFNTestLambda/ServiceRole",
                "children": {
                  "ImportServiceRole": {
                    "id": "ImportServiceRole",
                    "path": "ActionsProbeTesting/WaitSFNTestLambda/ServiceRole/ImportServiceRole",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.Resource",
                      "version": "2.122.0"
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "ActionsProbeTesting/WaitSFNTestLambda/ServiceRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "lambda.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "managedPolicyArns": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                              ]
                            ]
                          }
                        ]
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.Role",
                  "version": "2.122.0"
                }
              },
              "Code": {
                "id": "Code",
                "path": "ActionsProbeTesting/WaitSFNTestLambda/Code",
                "children": {
                  "Stage": {
                    "id": "Stage",
                    "path": "ActionsProbeTesting/WaitSFNTestLambda/Code/Stage",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.AssetStaging",
                      "version": "2.122.0"
                    }
                  },
                  "AssetBucket": {
                    "id": "AssetBucket",
                    "path": "ActionsProbeTesting/WaitSFNTestLambda/Code/AssetBucket",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_s3.BucketBase",
                      "version": "2.122.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_s3_assets.Asset",
                  "version": "2.122.0"
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "ActionsProbeTesting/WaitSFNTestLambda/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                  "aws:cdk:cloudformation:props": {
                    "code": {
                      "s3Bucket": {
                        "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
                      },
                      "s3Key": "7aa7f7d1671504ff07aac4cbf5ec0e3142f6099b3470549bcf0c14660a467fb0.zip"
                    },
                    "functionName": "ebap-statemachine-test-Wait",
                    "handler": "main.lambda_handler",
                    "role": {
                      "Fn::GetAtt": [
                        "WaitSFNTestLambdaServiceRole829032B7",
                        "Arn"
                      ]
                    },
                    "runtime": "python3.10"
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_lambda.CfnFunction",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_lambda.Function",
              "version": "2.122.0"
            }
          },
          "WaitInvokeLambdaTask": {
            "id": "WaitInvokeLambdaTask",
            "path": "ActionsProbeTesting/WaitInvokeLambdaTask",
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_stepfunctions_tasks.LambdaInvoke",
              "version": "2.122.0"
            }
          },
          "WaitUploadRule": {
            "id": "WaitUploadRule",
            "path": "ActionsProbeTesting/WaitUploadRule",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ActionsProbeTesting/WaitUploadRule/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Events::Rule",
                  "aws:cdk:cloudformation:props": {
                    "eventPattern": {
                      "detail": {
                        "bucket": {
                          "name": [
                            {
                              "Ref": "BeginBucketEA13B4F2"
                            }
                          ]
                        }
                      },
                      "detail-type": [
                        "Object Created"
                      ],
                      "source": [
                        "aws.s3"
                      ]
                    },
                    "state": "ENABLED",
                    "targets": [
                      {
                        "id": "Target0",
                        "arn": {
                          "Ref": "WaitMachine495FAF14"
                        },
                        "roleArn": {
                          "Fn::GetAtt": [
                            "WaitMachineEventsRole4FB2E136",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_events.CfnRule",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_events.Rule",
              "version": "2.122.0"
            }
          },
          "Wait2": {
            "id": "Wait2",
            "path": "ActionsProbeTesting/Wait2",
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_stepfunctions.Wait",
              "version": "2.122.0"
            }
          },
          "Wait2Machine": {
            "id": "Wait2Machine",
            "path": "ActionsProbeTesting/Wait2Machine",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ActionsProbeTesting/Wait2Machine/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::StepFunctions::StateMachine",
                  "aws:cdk:cloudformation:props": {
                    "definitionString": "{\"StartAt\":\"Wait2\",\"States\":{\"Wait2\":{\"Type\":\"Wait\",\"Seconds\":60,\"End\":true}}}",
                    "roleArn": {
                      "Fn::GetAtt": [
                        "EBTestingStateMachineC23DE3E5",
                        "Arn"
                      ]
                    },
                    "tags": [
                      {
                        "key": "Type",
                        "value": "RegressionTesting"
                      }
                    ]
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_stepfunctions.CfnStateMachine",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_stepfunctions.StateMachine",
              "version": "2.122.0"
            }
          },
          "Wait2MachineArnParameter": {
            "id": "Wait2MachineArnParameter",
            "path": "ActionsProbeTesting/Wait2MachineArnParameter",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ActionsProbeTesting/Wait2MachineArnParameter/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "name": "/RegressionTesting/StateMachineArns/Wait2",
                    "type": "String",
                    "value": {
                      "Ref": "Wait2MachineD82433B0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ssm.CfnParameter",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ssm.StringParameter",
              "version": "2.122.0"
            }
          },
          "CDKMetadata": {
            "id": "CDKMetadata",
            "path": "ActionsProbeTesting/CDKMetadata",
            "children": {
              "Default": {
                "id": "Default",
                "path": "ActionsProbeTesting/CDKMetadata/Default",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnResource",
                  "version": "2.122.0"
                }
              },
              "Condition": {
                "id": "Condition",
                "path": "ActionsProbeTesting/CDKMetadata/Condition",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnCondition",
                  "version": "2.122.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "constructs.Construct",
              "version": "10.3.0"
            }
          },
          "BootstrapVersion": {
            "id": "BootstrapVersion",
            "path": "ActionsProbeTesting/BootstrapVersion",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnParameter",
              "version": "2.122.0"
            }
          },
          "CheckBootstrapVersion": {
            "id": "CheckBootstrapVersion",
            "path": "ActionsProbeTesting/CheckBootstrapVersion",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnRule",
              "version": "2.122.0"
            }
          }
        },
        "constructInfo": {
          "fqn": "aws-cdk-lib.Stack",
          "version": "2.122.0"
        }
      },
      "Tree": {
        "id": "Tree",
        "path": "Tree",
        "constructInfo": {
          "fqn": "constructs.Construct",
          "version": "10.3.0"
        }
      }
    },
    "constructInfo": {
      "fqn": "aws-cdk-lib.App",
      "version": "2.122.0"
    }
  }
}