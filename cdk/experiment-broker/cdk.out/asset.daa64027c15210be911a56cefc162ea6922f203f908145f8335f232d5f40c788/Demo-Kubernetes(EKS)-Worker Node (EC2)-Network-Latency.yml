version: 1.0.0
title: Demo-Kubernetes(EKS)-Worker Node (EC2)-Network-Latency
description: This experiment will Terminate an eks pod to simulate a crash or accidental termination
configuration:
  target: "experiment-demo.experimentvr.verticalrelevancelabs.com"
  intensity: 1000
  alarm_name: "Experiment-Demo Latency"
  alarm_state: "ALARM"
  aws_region: 'us-east-1'
  cluster_name: "experiment-eks"
  name_space: "experiment-demo"
  pod_name_pattern: "experiment-demo"
  tag_key: 'tag:k8s.io/cluster-autoscaler/experiment-eks'
  tag_value: 'owned'

steady-state-hypothesis:
    title: Check Service Status is Healthy
    probes:
      - type: probe
        name: all-services-are-healthy
        tolerance: true
        provider:
          type: python
          module: experimentvr.k8s.probes
          func: assert_pod_healthy
          arguments:
            cluster_name: ${cluster_name}
            namespace: ${name_space}
            pod_name: ${pod_name_pattern}
method:
  - type: action
    name: Introduce load to experiment-demo
    background: true
    provider:
      type: python
      module: experimentvr.load.actions
      func: load_generate_demo
      arguments:
        target: ${target}
        intensity: ${intensity}
  - type: action
    name: Introduce Latency to a node
    provider:
      type: python
      module: experimentvr.ec2.actions
      func: ec2_stress_network_latency
      arguments:
        tag_key: ${tag_key}
        tag_value: ${tag_value}
        region: ${aws_region}
  - type: probe
    name: Check Alarm State
    provider:
      type: python
      module: experimentvr.cloudwatch.probes
      func: probe_alarm_state
      arguments:
        alarm_name: ${alarm_name}
        alarm_state: ${alarm_state}