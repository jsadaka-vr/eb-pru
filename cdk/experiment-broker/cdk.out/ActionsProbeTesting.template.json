{
 "Resources": {
  "TestBucket560B80BC": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "ebap-test"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/TestBucket/Resource"
   }
  },
  "BeginBucketEA13B4F2": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "ebap-begin"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/BeginBucket/Resource"
   }
  },
  "BeginBucketNotifications9D5AF976": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "BeginBucketEA13B4F2"
    },
    "NotificationConfiguration": {
     "EventBridgeConfiguration": {}
    },
    "Managed": true
   },
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/BeginBucket/Notifications/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def with_id(n):\n    n['Id'] = f\"{stack_id}-{hash(json.dumps(n, sort_keys=True))}\"\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        ids = [with_id(n) for n in old.get(t, [])]\n        old_incoming_ids = [n['Id'] for n in ids]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'] in old_incoming_ids]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "EBTestingStateMachineC23DE3E5": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "states.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/EBTestingStateMachine/Resource"
   }
  },
  "EBTestingStateMachineDefaultPolicyDC7E7FFD": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "WaitSFNTestLambda2CF9762A",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "WaitSFNTestLambda2CF9762A",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EBTestingStateMachineDefaultPolicyDC7E7FFD",
    "Roles": [
     {
      "Ref": "EBTestingStateMachineC23DE3E5"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/EBTestingStateMachine/DefaultPolicy/Resource"
   }
  },
  "WaitMachine495FAF14": {
   "Type": "AWS::StepFunctions::StateMachine",
   "Properties": {
    "DefinitionString": "{\"StartAt\":\"Wait\",\"States\":{\"Wait\":{\"Type\":\"Wait\",\"Seconds\":60,\"End\":true}}}",
    "RoleArn": {
     "Fn::GetAtt": [
      "EBTestingStateMachineC23DE3E5",
      "Arn"
     ]
    },
    "Tags": [
     {
      "Key": "Type",
      "Value": "RegressionTesting"
     }
    ]
   },
   "DependsOn": [
    "EBTestingStateMachineDefaultPolicyDC7E7FFD",
    "EBTestingStateMachineC23DE3E5"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/WaitMachine/Resource"
   }
  },
  "WaitMachineEventsRole4FB2E136": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "events.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Type",
      "Value": "RegressionTesting"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/WaitMachine/EventsRole/Resource"
   }
  },
  "WaitMachineEventsRoleDefaultPolicy9AF12A78": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "states:StartExecution",
       "Effect": "Allow",
       "Resource": {
        "Ref": "WaitMachine495FAF14"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "WaitMachineEventsRoleDefaultPolicy9AF12A78",
    "Roles": [
     {
      "Ref": "WaitMachineEventsRole4FB2E136"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/WaitMachine/EventsRole/DefaultPolicy/Resource"
   }
  },
  "WaitMachineArnParameter51F7F29B": {
   "Type": "AWS::SSM::Parameter",
   "Properties": {
    "Name": "/RegressionTesting/StateMachineArns/Wait",
    "Type": "String",
    "Value": {
     "Ref": "WaitMachine495FAF14"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/WaitMachineArnParameter/Resource"
   }
  },
  "WaitSFNTestLambdaServiceRole829032B7": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/WaitSFNTestLambda/ServiceRole/Resource"
   }
  },
  "WaitSFNTestLambda2CF9762A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "7aa7f7d1671504ff07aac4cbf5ec0e3142f6099b3470549bcf0c14660a467fb0.zip"
    },
    "FunctionName": "ebap-statemachine-test-Wait",
    "Handler": "main.lambda_handler",
    "Role": {
     "Fn::GetAtt": [
      "WaitSFNTestLambdaServiceRole829032B7",
      "Arn"
     ]
    },
    "Runtime": "python3.10"
   },
   "DependsOn": [
    "WaitSFNTestLambdaServiceRole829032B7"
   ],
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/WaitSFNTestLambda/Resource",
    "aws:asset:path": "asset.7aa7f7d1671504ff07aac4cbf5ec0e3142f6099b3470549bcf0c14660a467fb0",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "WaitUploadRuleEC0F3BCF": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "EventPattern": {
     "detail": {
      "bucket": {
       "name": [
        {
         "Ref": "BeginBucketEA13B4F2"
        }
       ]
      }
     },
     "detail-type": [
      "Object Created"
     ],
     "source": [
      "aws.s3"
     ]
    },
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Ref": "WaitMachine495FAF14"
      },
      "Id": "Target0",
      "RoleArn": {
       "Fn::GetAtt": [
        "WaitMachineEventsRole4FB2E136",
        "Arn"
       ]
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/WaitUploadRule/Resource"
   }
  },
  "Wait2MachineD82433B0": {
   "Type": "AWS::StepFunctions::StateMachine",
   "Properties": {
    "DefinitionString": "{\"StartAt\":\"Wait2\",\"States\":{\"Wait2\":{\"Type\":\"Wait\",\"Seconds\":60,\"End\":true}}}",
    "RoleArn": {
     "Fn::GetAtt": [
      "EBTestingStateMachineC23DE3E5",
      "Arn"
     ]
    },
    "Tags": [
     {
      "Key": "Type",
      "Value": "RegressionTesting"
     }
    ]
   },
   "DependsOn": [
    "EBTestingStateMachineDefaultPolicyDC7E7FFD",
    "EBTestingStateMachineC23DE3E5"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/Wait2Machine/Resource"
   }
  },
  "Wait2MachineArnParameter61BFA1F1": {
   "Type": "AWS::SSM::Parameter",
   "Properties": {
    "Name": "/RegressionTesting/StateMachineArns/Wait2",
    "Type": "String",
    "Value": {
     "Ref": "Wait2MachineD82433B0"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/Wait2MachineArnParameter/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/1VPy26DMBD8ltzNtkB+oIlUqVIrIXrIEW3MJtkAdsWaVJHFv9c2pGpPM7OP2dkC8qKA5w1+S6bbLuv5CP7Toe5UKDVeSvC7SXfk1P5kVrbADoVmxTiAr21PsZ+wsj3re5QLm5U4+jpNRju2RsAfkJ0KNxx9oL6wSat/ddiQIcYY2ZwrHHEgR2NyfIhZ9TgcWwT/uhrH9oMHg7JBEXICLxH+R2gcSifwnhzezM12pOhGJkz7elpfCTjPiZHYadSkfkmyDIHPIV6c2FvT8nK3uruLNU8l5DlsN1dhzsbJOB4I6gV/ABRy38FyAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "ActionsProbeTesting/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}